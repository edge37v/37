import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as compute_rest_props, v as validate_slots, a as assign, e as exclude_internal_props, b as empty, f as insert_dev, n as noop, g as detach_dev, h as bubble, j as element, k as claim_element, l as children, m as set_attributes, t as toggle_class, o as add_location, p as listen_dev, q as get_spread_update, r as run_all, u as text, w as claim_text, x as append_dev, y as getContext, z as group_outros, A as transition_out, B as check_outros, C as transition_in, D as binding_callbacks, E as create_slot, F as set_data_dev, G as create_component, H as claim_component, I as mount_component, J as destroy_component, K as space, L as claim_space, M as update_slot, N as get_spread_object, O as svg_element, P as attr_dev, Q as set_svg_attributes, R as createEventDispatcher, T as validate_each_argument, U as prop_dev, V as select_option, W as destroy_each, X as afterUpdate, Y as Row, Z as onMount, _ as Column, $ as globals, a0 as bind, a1 as validate_each_keys, a2 as add_flush_callback, a3 as update_keyed_each, a4 as outro_and_destroy_block } from './client.d23f1812.js';

/* node_modules\carbon-components-svelte\src\Button\Button.Skeleton.svelte generated by Svelte v3.24.1 */

const file = "node_modules\\carbon-components-svelte\\src\\Button\\Button.Skeleton.svelte";

// (38:0) {:else}
function create_else_block(ctx) {
	let div;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
			add_location(div, file, 38, 2, 803);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(div, "click", /*click_handler_1*/ ctx[8], false, false, false),
					listen_dev(div, "mouseover", /*mouseover_handler_1*/ ctx[9], false, false, false),
					listen_dev(div, "mouseenter", /*mouseenter_handler_1*/ ctx[10], false, false, false),
					listen_dev(div, "mouseleave", /*mouseleave_handler_1*/ ctx[11], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(38:0) {:else}",
		ctx
	});

	return block;
}

// (21:0) {#if href}
function create_if_block(ctx) {
	let a;
	let t_value = "" + "";
	let t;
	let a_rel_value;
	let mounted;
	let dispose;

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
			? "noopener noreferrer"
			: undefined
		},
		{ role: "button" },
		/*$$restProps*/ ctx[3]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, rel: true, role: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(a, a_data);
			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
			add_location(a, file, 21, 2, 410);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = [
					listen_dev(a, "click", /*click_handler*/ ctx[4], false, false, false),
					listen_dev(a, "mouseover", /*mouseover_handler*/ ctx[5], false, false, false),
					listen_dev(a, "mouseenter", /*mouseenter_handler*/ ctx[6], false, false, false),
					listen_dev(a, "mouseleave", /*mouseleave_handler*/ ctx[7], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*href*/ 1 && { href: /*href*/ ctx[0] },
				dirty & /*$$restProps*/ 8 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[3].target === "_blank"
				? "noopener noreferrer"
				: undefined) && { rel: a_rel_value },
				{ role: "button" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === "field");
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === "small" || /*small*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(21:0) {#if href}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","size","small"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { href = undefined } = $$props;
	let { size = "default" } = $$props;
	let { small = false } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Button_Skeleton", $$slots, []);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("href" in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("small" in $$new_props) $$invalidate(2, small = $$new_props.small);
	};

	$$self.$capture_state = () => ({ href, size, small });

	$$self.$inject_state = $$new_props => {
		if ("href" in $$props) $$invalidate(0, href = $$new_props.href);
		if ("size" in $$props) $$invalidate(1, size = $$new_props.size);
		if ("small" in $$props) $$invalidate(2, small = $$new_props.small);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		href,
		size,
		small,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class Button_Skeleton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { href: 0, size: 1, small: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button_Skeleton",
			options,
			id: create_fragment.name
		});
	}

	get href() {
		throw new Error("<Button_Skeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Button_Skeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Button_Skeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Button_Skeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get small() {
		throw new Error("<Button_Skeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set small(value) {
		throw new Error("<Button_Skeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-components-svelte\src\Button\Button.svelte generated by Svelte v3.24.1 */
const file$1 = "node_modules\\carbon-components-svelte\\src\\Button\\Button.svelte";
const get_default_slot_changes = dirty => ({ props: dirty[0] & /*buttonProps*/ 512 });
const get_default_slot_context = ctx => ({ props: /*buttonProps*/ ctx[9] });

// (160:2) {:else}
function create_else_block$1(ctx) {
	let button;
	let t0;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*hasIconOnly*/ ctx[2] && create_if_block_6(ctx);
	const default_slot_template = /*$$slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	let if_block1 = /*icon*/ ctx[3] && create_if_block_5(ctx);
	let button_levels = [/*buttonProps*/ ctx[9]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const block = {
		c: function create() {
			button = element("button");
			if (if_block0) if_block0.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			if (if_block0) if_block0.l(button_nodes);
			t0 = claim_space(button_nodes);
			if (default_slot) default_slot.l(button_nodes);
			t1 = claim_space(button_nodes);
			if (if_block1) if_block1.l(button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(button, button_data);
			add_location(button, file$1, 160, 4, 3886);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			if (if_block0) if_block0.m(button, null);
			append_dev(button, t0);

			if (default_slot) {
				default_slot.m(button, null);
			}

			append_dev(button, t1);
			if (if_block1) if_block1.m(button, null);
			/*button_binding*/ ctx[31](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*click_handler_2*/ ctx[22], false, false, false),
					listen_dev(button, "mouseover", /*mouseover_handler_2*/ ctx[23], false, false, false),
					listen_dev(button, "mouseenter", /*mouseenter_handler_2*/ ctx[24], false, false, false),
					listen_dev(button, "mouseleave", /*mouseleave_handler_2*/ ctx[25], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(button, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			if (/*icon*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*icon*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_5(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(button, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (if_block0) if_block0.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block1) if_block1.d();
			/*button_binding*/ ctx[31](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(160:2) {:else}",
		ctx
	});

	return block;
}

// (137:30) 
function create_if_block_2(ctx) {
	let a;
	let t0;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*hasIconOnly*/ ctx[2] && create_if_block_4(ctx);
	const default_slot_template = /*$$slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	let if_block1 = /*icon*/ ctx[3] && create_if_block_3(ctx);
	let a_levels = [/*buttonProps*/ ctx[9]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			if (if_block0) if_block0.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {});
			var a_nodes = children(a);
			if (if_block0) if_block0.l(a_nodes);
			t0 = claim_space(a_nodes);
			if (default_slot) default_slot.l(a_nodes);
			t1 = claim_space(a_nodes);
			if (if_block1) if_block1.l(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(a, a_data);
			add_location(a, file$1, 138, 4, 3417);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			if (if_block0) if_block0.m(a, null);
			append_dev(a, t0);

			if (default_slot) {
				default_slot.m(a, null);
			}

			append_dev(a, t1);
			if (if_block1) if_block1.m(a, null);
			/*a_binding*/ ctx[30](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a, "click", /*click_handler_1*/ ctx[18], false, false, false),
					listen_dev(a, "mouseover", /*mouseover_handler_1*/ ctx[19], false, false, false),
					listen_dev(a, "mouseenter", /*mouseenter_handler_1*/ ctx[20], false, false, false),
					listen_dev(a, "mouseleave", /*mouseleave_handler_1*/ ctx[21], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(a, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			if (/*icon*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*icon*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(a, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (if_block0) if_block0.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block1) if_block1.d();
			/*a_binding*/ ctx[30](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(137:30) ",
		ctx
	});

	return block;
}

// (135:2) {#if as}
function create_if_block_1(ctx) {
	let current;
	const default_slot_template = /*$$slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], get_default_slot_context);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope, buttonProps*/ 66048) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(135:2) {#if as}",
		ctx
	});

	return block;
}

// (123:0) {#if skeleton}
function create_if_block$1(ctx) {
	let buttonskeleton;
	let current;

	const buttonskeleton_spread_levels = [
		{ href: /*href*/ ctx[8] },
		{ size: /*size*/ ctx[1] },
		/*$$restProps*/ ctx[10],
		{
			style: /*hasIconOnly*/ ctx[2] && "width: 3rem;"
		}
	];

	let buttonskeleton_props = {};

	for (let i = 0; i < buttonskeleton_spread_levels.length; i += 1) {
		buttonskeleton_props = assign(buttonskeleton_props, buttonskeleton_spread_levels[i]);
	}

	buttonskeleton = new Button_Skeleton({
			props: buttonskeleton_props,
			$$inline: true
		});

	buttonskeleton.$on("click", /*click_handler*/ ctx[26]);
	buttonskeleton.$on("mouseover", /*mouseover_handler*/ ctx[27]);
	buttonskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[28]);
	buttonskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[29]);

	const block = {
		c: function create() {
			create_component(buttonskeleton.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(buttonskeleton.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(buttonskeleton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const buttonskeleton_changes = (dirty[0] & /*href, size, $$restProps, hasIconOnly*/ 1286)
			? get_spread_update(buttonskeleton_spread_levels, [
					dirty[0] & /*href*/ 256 && { href: /*href*/ ctx[8] },
					dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] },
					dirty[0] & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10]),
					dirty[0] & /*hasIconOnly*/ 4 && {
						style: /*hasIconOnly*/ ctx[2] && "width: 3rem;"
					}
				])
			: {};

			buttonskeleton.$set(buttonskeleton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(buttonskeleton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(buttonskeleton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(buttonskeleton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(123:0) {#if skeleton}",
		ctx
	});

	return block;
}

// (169:6) {#if hasIconOnly}
function create_if_block_6(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*iconDescription*/ ctx[4]);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			toggle_class(span, "bx--assistive-text", true);
			add_location(span, file$1, 169, 8, 4053);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 16) set_data_dev(t, /*iconDescription*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(169:6) {#if hasIconOnly}",
		ctx
	});

	return block;
}

// (173:6) {#if icon}
function create_if_block_5(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[4]
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 16) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[4];

			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(173:6) {#if icon}",
		ctx
	});

	return block;
}

// (147:6) {#if hasIconOnly}
function create_if_block_4(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[4]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", {});
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*iconDescription*/ ctx[4]);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			toggle_class(span, "bx--assistive-text", true);
			add_location(span, file$1, 147, 8, 3579);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 16) set_data_dev(t, /*iconDescription*/ ctx[4]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(147:6) {#if hasIconOnly}",
		ctx
	});

	return block;
}

// (151:6) {#if icon}
function create_if_block_3(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[4]
			},
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	const block = {
		c: function create() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l: function claim(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert_dev(target, switch_instance_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 16) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[4];

			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(151:6) {#if icon}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_if_block_1, create_if_block_2, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[6]) return 0;
		if (/*as*/ ctx[5]) return 1;
		if (/*href*/ ctx[8] && !/*disabled*/ ctx[7]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"kind","size","hasIconOnly","icon","iconDescription","tooltipAlignment","tooltipPosition","as","skeleton","disabled","href","tabindex","type","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { kind = "primary" } = $$props;
	let { size = "default" } = $$props;
	let { hasIconOnly = false } = $$props;
	let { icon = undefined } = $$props;
	let { iconDescription = undefined } = $$props;
	let { tooltipAlignment = undefined } = $$props;
	let { tooltipPosition = undefined } = $$props;
	let { as = false } = $$props;
	let { skeleton = false } = $$props;
	let { disabled = false } = $$props;
	let { href = undefined } = $$props;
	let { tabindex = "0" } = $$props;
	let { type = "button" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ComposedModal");
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Button", $$slots, ['default']);

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble($$self, event);
	}

	function click_handler_2(event) {
		bubble($$self, event);
	}

	function mouseover_handler_2(event) {
		bubble($$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble($$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble($$self, event);
	}

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("kind" in $$new_props) $$invalidate(11, kind = $$new_props.kind);
		if ("size" in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ("hasIconOnly" in $$new_props) $$invalidate(2, hasIconOnly = $$new_props.hasIconOnly);
		if ("icon" in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ("iconDescription" in $$new_props) $$invalidate(4, iconDescription = $$new_props.iconDescription);
		if ("tooltipAlignment" in $$new_props) $$invalidate(12, tooltipAlignment = $$new_props.tooltipAlignment);
		if ("tooltipPosition" in $$new_props) $$invalidate(13, tooltipPosition = $$new_props.tooltipPosition);
		if ("as" in $$new_props) $$invalidate(5, as = $$new_props.as);
		if ("skeleton" in $$new_props) $$invalidate(6, skeleton = $$new_props.skeleton);
		if ("disabled" in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ("href" in $$new_props) $$invalidate(8, href = $$new_props.href);
		if ("tabindex" in $$new_props) $$invalidate(14, tabindex = $$new_props.tabindex);
		if ("type" in $$new_props) $$invalidate(15, type = $$new_props.type);
		if ("ref" in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		kind,
		size,
		hasIconOnly,
		icon,
		iconDescription,
		tooltipAlignment,
		tooltipPosition,
		as,
		skeleton,
		disabled,
		href,
		tabindex,
		type,
		ref,
		getContext,
		ButtonSkeleton: Button_Skeleton,
		ctx,
		buttonProps
	});

	$$self.$inject_state = $$new_props => {
		if ("kind" in $$props) $$invalidate(11, kind = $$new_props.kind);
		if ("size" in $$props) $$invalidate(1, size = $$new_props.size);
		if ("hasIconOnly" in $$props) $$invalidate(2, hasIconOnly = $$new_props.hasIconOnly);
		if ("icon" in $$props) $$invalidate(3, icon = $$new_props.icon);
		if ("iconDescription" in $$props) $$invalidate(4, iconDescription = $$new_props.iconDescription);
		if ("tooltipAlignment" in $$props) $$invalidate(12, tooltipAlignment = $$new_props.tooltipAlignment);
		if ("tooltipPosition" in $$props) $$invalidate(13, tooltipPosition = $$new_props.tooltipPosition);
		if ("as" in $$props) $$invalidate(5, as = $$new_props.as);
		if ("skeleton" in $$props) $$invalidate(6, skeleton = $$new_props.skeleton);
		if ("disabled" in $$props) $$invalidate(7, disabled = $$new_props.disabled);
		if ("href" in $$props) $$invalidate(8, href = $$new_props.href);
		if ("tabindex" in $$props) $$invalidate(14, tabindex = $$new_props.tabindex);
		if ("type" in $$props) $$invalidate(15, type = $$new_props.type);
		if ("ref" in $$props) $$invalidate(0, ref = $$new_props.ref);
		if ("buttonProps" in $$props) $$invalidate(9, buttonProps = $$new_props.buttonProps);
	};

	let buttonProps;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*ref*/ 1) {
			 if (ctx && ref) {
				ctx.declareRef(ref);
			}
		}

		 $$invalidate(9, buttonProps = {
			role: "button",
			type: href && !disabled ? undefined : type,
			tabindex,
			disabled,
			href,
			...$$restProps,
			class: [
				"bx--btn",
				size === "field" && "bx--btn--field",
				size === "small" && "bx--btn--sm",
				kind && `bx--btn--${kind}`,
				disabled && "bx--btn--disabled",
				hasIconOnly && "bx--btn--icon-only",
				hasIconOnly && "bx--tooltip__trigger",
				hasIconOnly && "bx--tooltip--a11y",
				hasIconOnly && tooltipPosition && `bx--tooltip--${tooltipPosition}`,
				hasIconOnly && tooltipAlignment && `bx--tooltip--align-${tooltipAlignment}`,
				$$restProps.class
			].filter(Boolean).join(" ")
		});
	};

	return [
		ref,
		size,
		hasIconOnly,
		icon,
		iconDescription,
		as,
		skeleton,
		disabled,
		href,
		buttonProps,
		$$restProps,
		kind,
		tooltipAlignment,
		tooltipPosition,
		tabindex,
		type,
		$$scope,
		$$slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		a_binding,
		button_binding
	];
}

class Button extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				kind: 11,
				size: 1,
				hasIconOnly: 2,
				icon: 3,
				iconDescription: 4,
				tooltipAlignment: 12,
				tooltipPosition: 13,
				as: 5,
				skeleton: 6,
				disabled: 7,
				href: 8,
				tabindex: 14,
				type: 15,
				ref: 0
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button",
			options,
			id: create_fragment$1.name
		});
	}

	get kind() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set kind(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hasIconOnly() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hasIconOnly(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get icon() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set icon(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get iconDescription() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set iconDescription(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tooltipAlignment() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tooltipAlignment(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tooltipPosition() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tooltipPosition(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get as() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set as(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get skeleton() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set skeleton(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-icons-svelte\lib\WarningFilled16\WarningFilled16.svelte generated by Svelte v3.24.1 */

const file$2 = "node_modules\\carbon-icons-svelte\\lib\\WarningFilled16\\WarningFilled16.svelte";

// (39:4) {#if title}
function create_if_block$2(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			title_1 = claim_element(nodes, "title", {}, 1);
			var title_1_nodes = children(title_1);
			t = claim_text(title_1_nodes, /*title*/ ctx[2]);
			title_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(title_1, file$2, 39, 6, 1352);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(39:4) {#if title}",
		ctx
	});

	return block;
}

// (38:8)      
function fallback_block(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$2(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(38:8)      ",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningFilled16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 16 16" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					"data-carbon-icon": true,
					xmlns: true,
					viewBox: true,
					fill: true,
					width: true,
					height: true,
					class: true,
					preserveAspectRatio: true,
					style: true,
					id: true
				},
				1
			);

			var svg_nodes = children(svg);
			path0 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path0).forEach(detach_dev);

			path1 = claim_element(
				svg_nodes,
				"path",
				{
					d: true,
					"data-icon-path": true,
					opacity: true
				},
				1
			);

			children(path1).forEach(detach_dev);
			if (default_slot_or_fallback) default_slot_or_fallback.l(svg_nodes);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path0, "d", "M8,1C4.2,1,1,4.2,1,8s3.2,7,7,7s7-3.1,7-7S11.9,1,8,1z M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2\tc-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8c0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z");
			add_location(path0, file$2, 36, 2, 953);
			attr_dev(path1, "d", "M7.5,4h1v5h-1C7.5,9,7.5,4,7.5,4z M8,12.2c-0.4,0-0.8-0.4-0.8-0.8s0.3-0.8,0.8-0.8\tc0.4,0,0.8,0.4,0.8,0.8S8.4,12.2,8,12.2z");
			attr_dev(path1, "data-icon-path", "inner-path");
			attr_dev(path1, "opacity", "0");
			add_location(path1, file$2, 36, 192, 1143);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$2, 22, 0, 633);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(svg, "click", /*click_handler*/ ctx[9], false, false, false),
					listen_dev(svg, "mouseover", /*mouseover_handler*/ ctx[10], false, false, false),
					listen_dev(svg, "mouseenter", /*mouseenter_handler*/ ctx[11], false, false, false),
					listen_dev(svg, "mouseleave", /*mouseleave_handler*/ ctx[12], false, false, false),
					listen_dev(svg, "keyup", /*keyup_handler*/ ctx[13], false, false, false),
					listen_dev(svg, "keydown", /*keydown_handler*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningFilled16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 16 16" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("WarningFilled16", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		className,
		id,
		tabindex,
		focusable,
		title,
		style,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		attributes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(0, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$props) $$invalidate(3, style = $$new_props.style);
		if ("ariaLabel" in $$props) $$invalidate(15, ariaLabel = $$new_props.ariaLabel);
		if ("ariaLabelledBy" in $$props) $$invalidate(16, ariaLabelledBy = $$new_props.ariaLabelledBy);
		if ("labelled" in $$props) $$invalidate(17, labelled = $$new_props.labelled);
		if ("attributes" in $$props) $$invalidate(4, attributes = $$new_props.attributes);
	};

	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(15, ariaLabel = $$props["aria-label"]);
		 $$invalidate(16, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 98308) {
			 $$invalidate(17, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 229472) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		$$scope,
		$$slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningFilled16 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "WarningFilled16",
			options,
			id: create_fragment$2.name
		});
	}

	get class() {
		throw new Error("<WarningFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<WarningFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<WarningFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<WarningFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<WarningFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<WarningFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focusable() {
		throw new Error("<WarningFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focusable(value) {
		throw new Error("<WarningFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<WarningFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<WarningFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<WarningFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<WarningFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-icons-svelte\lib\CaretLeft16\CaretLeft16.svelte generated by Svelte v3.24.1 */

const file$3 = "node_modules\\carbon-icons-svelte\\lib\\CaretLeft16\\CaretLeft16.svelte";

// (39:4) {#if title}
function create_if_block$3(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			title_1 = claim_element(nodes, "title", {}, 1);
			var title_1_nodes = children(title_1);
			t = claim_text(title_1_nodes, /*title*/ ctx[2]);
			title_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(title_1, file$3, 39, 6, 1017);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$3.name,
		type: "if",
		source: "(39:4) {#if title}",
		ctx
	});

	return block;
}

// (38:8)      
function fallback_block$1(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$3(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$1.name,
		type: "fallback",
		source: "(38:8)      ",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "CaretLeft16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					"data-carbon-icon": true,
					xmlns: true,
					viewBox: true,
					fill: true,
					width: true,
					height: true,
					class: true,
					preserveAspectRatio: true,
					style: true,
					id: true
				},
				1
			);

			var svg_nodes = children(svg);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			if (default_slot_or_fallback) default_slot_or_fallback.l(svg_nodes);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M20 24L10 16 20 8z");
			add_location(path, file$3, 36, 2, 949);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$3, 22, 0, 633);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(svg, "click", /*click_handler*/ ctx[9], false, false, false),
					listen_dev(svg, "mouseover", /*mouseover_handler*/ ctx[10], false, false, false),
					listen_dev(svg, "mouseenter", /*mouseenter_handler*/ ctx[11], false, false, false),
					listen_dev(svg, "mouseleave", /*mouseleave_handler*/ ctx[12], false, false, false),
					listen_dev(svg, "keyup", /*keyup_handler*/ ctx[13], false, false, false),
					listen_dev(svg, "keydown", /*keydown_handler*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "CaretLeft16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("CaretLeft16", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		className,
		id,
		tabindex,
		focusable,
		title,
		style,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		attributes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(0, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$props) $$invalidate(3, style = $$new_props.style);
		if ("ariaLabel" in $$props) $$invalidate(15, ariaLabel = $$new_props.ariaLabel);
		if ("ariaLabelledBy" in $$props) $$invalidate(16, ariaLabelledBy = $$new_props.ariaLabelledBy);
		if ("labelled" in $$props) $$invalidate(17, labelled = $$new_props.labelled);
		if ("attributes" in $$props) $$invalidate(4, attributes = $$new_props.attributes);
	};

	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(15, ariaLabel = $$props["aria-label"]);
		 $$invalidate(16, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 98308) {
			 $$invalidate(17, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 229472) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		$$scope,
		$$slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class CaretLeft16 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CaretLeft16",
			options,
			id: create_fragment$3.name
		});
	}

	get class() {
		throw new Error("<CaretLeft16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CaretLeft16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CaretLeft16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CaretLeft16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<CaretLeft16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<CaretLeft16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focusable() {
		throw new Error("<CaretLeft16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focusable(value) {
		throw new Error("<CaretLeft16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<CaretLeft16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<CaretLeft16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<CaretLeft16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<CaretLeft16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-icons-svelte\lib\CaretRight16\CaretRight16.svelte generated by Svelte v3.24.1 */

const file$4 = "node_modules\\carbon-icons-svelte\\lib\\CaretRight16\\CaretRight16.svelte";

// (39:4) {#if title}
function create_if_block$4(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			title_1 = claim_element(nodes, "title", {}, 1);
			var title_1_nodes = children(title_1);
			t = claim_text(title_1_nodes, /*title*/ ctx[2]);
			title_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(title_1, file$4, 39, 6, 1018);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$4.name,
		type: "if",
		source: "(39:4) {#if title}",
		ctx
	});

	return block;
}

// (38:8)      
function fallback_block$2(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$4(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$2.name,
		type: "fallback",
		source: "(38:8)      ",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$2(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "CaretRight16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					"data-carbon-icon": true,
					xmlns: true,
					viewBox: true,
					fill: true,
					width: true,
					height: true,
					class: true,
					preserveAspectRatio: true,
					style: true,
					id: true
				},
				1
			);

			var svg_nodes = children(svg);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			if (default_slot_or_fallback) default_slot_or_fallback.l(svg_nodes);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M12 8L22 16 12 24z");
			add_location(path, file$4, 36, 2, 950);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$4, 22, 0, 633);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(svg, "click", /*click_handler*/ ctx[9], false, false, false),
					listen_dev(svg, "mouseover", /*mouseover_handler*/ ctx[10], false, false, false),
					listen_dev(svg, "mouseenter", /*mouseenter_handler*/ ctx[11], false, false, false),
					listen_dev(svg, "mouseleave", /*mouseleave_handler*/ ctx[12], false, false, false),
					listen_dev(svg, "keyup", /*keyup_handler*/ ctx[13], false, false, false),
					listen_dev(svg, "keydown", /*keydown_handler*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "CaretRight16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("CaretRight16", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		className,
		id,
		tabindex,
		focusable,
		title,
		style,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		attributes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(0, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$props) $$invalidate(3, style = $$new_props.style);
		if ("ariaLabel" in $$props) $$invalidate(15, ariaLabel = $$new_props.ariaLabel);
		if ("ariaLabelledBy" in $$props) $$invalidate(16, ariaLabelledBy = $$new_props.ariaLabelledBy);
		if ("labelled" in $$props) $$invalidate(17, labelled = $$new_props.labelled);
		if ("attributes" in $$props) $$invalidate(4, attributes = $$new_props.attributes);
	};

	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(15, ariaLabel = $$props["aria-label"]);
		 $$invalidate(16, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 98308) {
			 $$invalidate(17, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 229472) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		$$scope,
		$$slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class CaretRight16 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CaretRight16",
			options,
			id: create_fragment$4.name
		});
	}

	get class() {
		throw new Error("<CaretRight16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<CaretRight16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<CaretRight16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<CaretRight16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<CaretRight16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<CaretRight16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focusable() {
		throw new Error("<CaretRight16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focusable(value) {
		throw new Error("<CaretRight16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<CaretRight16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<CaretRight16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<CaretRight16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<CaretRight16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-components-svelte\src\PaginationNav\PaginationItem.svelte generated by Svelte v3.24.1 */

const file$5 = "node_modules\\carbon-components-svelte\\src\\PaginationNav\\PaginationItem.svelte";

function create_fragment$5(ctx) {
	let li;
	let button;
	let span;
	let t0;
	let t1;
	let button_aria_current_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			li = element("li");
			button = element("button");
			span = element("span");
			if (default_slot) default_slot.c();
			t0 = space();
			t1 = text(/*page*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			button = claim_element(li_nodes, "BUTTON", { "data-page": true, "aria-current": true });
			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", {});
			var span_nodes = children(span);
			if (default_slot) default_slot.l(span_nodes);
			span_nodes.forEach(detach_dev);
			t0 = claim_space(button_nodes);
			t1 = claim_text(button_nodes, /*page*/ ctx[0]);
			button_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			toggle_class(span, "bx--pagination-nav__accessibility-label", true);
			add_location(span, file$5, 22, 4, 492);
			attr_dev(button, "data-page", /*page*/ ctx[0]);
			attr_dev(button, "aria-current", button_aria_current_value = /*active*/ ctx[1] ? "page" : undefined);
			toggle_class(button, "bx--pagination-nav__page", true);
			toggle_class(button, "bx--pagination-nav__page--active", /*active*/ ctx[1]);
			add_location(button, file$5, 15, 2, 293);
			toggle_class(li, "bx--pagination-nav__list-item", true);
			add_location(li, file$5, 14, 0, 241);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, button);
			append_dev(button, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			append_dev(button, t0);
			append_dev(button, t1);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (!current || dirty & /*page*/ 1) set_data_dev(t1, /*page*/ ctx[0]);

			if (!current || dirty & /*page*/ 1) {
				attr_dev(button, "data-page", /*page*/ ctx[0]);
			}

			if (!current || dirty & /*active*/ 2 && button_aria_current_value !== (button_aria_current_value = /*active*/ ctx[1] ? "page" : undefined)) {
				attr_dev(button, "aria-current", button_aria_current_value);
			}

			if (dirty & /*active*/ 2) {
				toggle_class(button, "bx--pagination-nav__page--active", /*active*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { page = 0 } = $$props;
	let { active = false } = $$props;
	const writable_props = ["page", "active"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PaginationItem> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("PaginationItem", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$props => {
		if ("page" in $$props) $$invalidate(0, page = $$props.page);
		if ("active" in $$props) $$invalidate(1, active = $$props.active);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ page, active });

	$$self.$inject_state = $$props => {
		if ("page" in $$props) $$invalidate(0, page = $$props.page);
		if ("active" in $$props) $$invalidate(1, active = $$props.active);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [page, active, $$scope, $$slots, click_handler];
}

class PaginationItem extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { page: 0, active: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PaginationItem",
			options,
			id: create_fragment$5.name
		});
	}

	get page() {
		throw new Error("<PaginationItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set page(value) {
		throw new Error("<PaginationItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get active() {
		throw new Error("<PaginationItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set active(value) {
		throw new Error("<PaginationItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-icons-svelte\lib\OverflowMenuHorizontal16\OverflowMenuHorizontal16.svelte generated by Svelte v3.24.1 */

const file$6 = "node_modules\\carbon-icons-svelte\\lib\\OverflowMenuHorizontal16\\OverflowMenuHorizontal16.svelte";

// (39:4) {#if title}
function create_if_block$5(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			title_1 = claim_element(nodes, "title", {}, 1);
			var title_1_nodes = children(title_1);
			t = claim_text(title_1_nodes, /*title*/ ctx[2]);
			title_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(title_1, file$6, 39, 6, 1110);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$5.name,
		type: "if",
		source: "(39:4) {#if title}",
		ctx
	});

	return block;
}

// (38:8)      
function fallback_block$3(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$5(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$5(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$3.name,
		type: "fallback",
		source: "(38:8)      ",
		ctx
	});

	return block;
}

function create_fragment$6(ctx) {
	let svg;
	let circle0;
	let circle1;
	let circle2;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$3(ctx);

	let svg_levels = [
		{
			"data-carbon-icon": "OverflowMenuHorizontal16"
		},
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			circle2 = svg_element("circle");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					"data-carbon-icon": true,
					xmlns: true,
					viewBox: true,
					fill: true,
					width: true,
					height: true,
					class: true,
					preserveAspectRatio: true,
					style: true,
					id: true
				},
				1
			);

			var svg_nodes = children(svg);
			circle0 = claim_element(svg_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle0).forEach(detach_dev);
			circle1 = claim_element(svg_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle1).forEach(detach_dev);
			circle2 = claim_element(svg_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle2).forEach(detach_dev);
			if (default_slot_or_fallback) default_slot_or_fallback.l(svg_nodes);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(circle0, "cx", "8");
			attr_dev(circle0, "cy", "16");
			attr_dev(circle0, "r", "2");
			add_location(circle0, file$6, 36, 2, 962);
			attr_dev(circle1, "cx", "16");
			attr_dev(circle1, "cy", "16");
			attr_dev(circle1, "r", "2");
			add_location(circle1, file$6, 36, 40, 1000);
			attr_dev(circle2, "cx", "24");
			attr_dev(circle2, "cy", "16");
			attr_dev(circle2, "r", "2");
			add_location(circle2, file$6, 36, 79, 1039);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$6, 22, 0, 633);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, circle0);
			append_dev(svg, circle1);
			append_dev(svg, circle2);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(svg, "click", /*click_handler*/ ctx[9], false, false, false),
					listen_dev(svg, "mouseover", /*mouseover_handler*/ ctx[10], false, false, false),
					listen_dev(svg, "mouseenter", /*mouseenter_handler*/ ctx[11], false, false, false),
					listen_dev(svg, "mouseleave", /*mouseleave_handler*/ ctx[12], false, false, false),
					listen_dev(svg, "keyup", /*keyup_handler*/ ctx[13], false, false, false),
					listen_dev(svg, "keydown", /*keydown_handler*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{
					"data-carbon-icon": "OverflowMenuHorizontal16"
				},
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("OverflowMenuHorizontal16", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		className,
		id,
		tabindex,
		focusable,
		title,
		style,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		attributes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(0, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$props) $$invalidate(3, style = $$new_props.style);
		if ("ariaLabel" in $$props) $$invalidate(15, ariaLabel = $$new_props.ariaLabel);
		if ("ariaLabelledBy" in $$props) $$invalidate(16, ariaLabelledBy = $$new_props.ariaLabelledBy);
		if ("labelled" in $$props) $$invalidate(17, labelled = $$new_props.labelled);
		if ("attributes" in $$props) $$invalidate(4, attributes = $$new_props.attributes);
	};

	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(15, ariaLabel = $$props["aria-label"]);
		 $$invalidate(16, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 98308) {
			 $$invalidate(17, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 229472) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		$$scope,
		$$slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class OverflowMenuHorizontal16 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "OverflowMenuHorizontal16",
			options,
			id: create_fragment$6.name
		});
	}

	get class() {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focusable() {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focusable(value) {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<OverflowMenuHorizontal16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-components-svelte\src\PaginationNav\PaginationOverflow.svelte generated by Svelte v3.24.1 */
const file$7 = "node_modules\\carbon-components-svelte\\src\\PaginationNav\\PaginationOverflow.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (49:22) 
function create_if_block_1$1(ctx) {
	let paginationitem;
	let current;

	paginationitem = new PaginationItem({
			props: {
				page: /*fromIndex*/ ctx[0] + 1,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	paginationitem.$on("click", /*click_handler*/ ctx[5]);

	const block = {
		c: function create() {
			create_component(paginationitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationitem_changes = {};
			if (dirty & /*fromIndex*/ 1) paginationitem_changes.page = /*fromIndex*/ ctx[0] + 1;

			if (dirty & /*$$scope*/ 512) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(49:22) ",
		ctx
	});

	return block;
}

// (23:0) {#if count > 1}
function create_if_block$6(ctx) {
	let li;
	let div1;
	let select;
	let option;
	let t;
	let div0;
	let overflowmenuhorizontal16;
	let current;
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*count*/ ctx[1] }, func);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	overflowmenuhorizontal16 = new OverflowMenuHorizontal16({
			props: { class: "bx--pagination-nav__select-icon" },
			$$inline: true
		});

	const block = {
		c: function create() {
			li = element("li");
			div1 = element("div");
			select = element("select");
			option = element("option");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			div0 = element("div");
			create_component(overflowmenuhorizontal16.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			div1 = claim_element(li_nodes, "DIV", {});
			var div1_nodes = children(div1);
			select = claim_element(div1_nodes, "SELECT", { "aria-label": true, value: true });
			var select_nodes = children(select);
			option = claim_element(select_nodes, "OPTION", { value: true, hidden: true });
			children(option).forEach(detach_dev);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select_nodes);
			}

			select_nodes.forEach(detach_dev);
			t = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", {});
			var div0_nodes = children(div0);
			claim_component(overflowmenuhorizontal16.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = "";
			option.value = option.__value;
			option.hidden = true;
			add_location(option, file$7, 36, 8, 990);
			attr_dev(select, "aria-label", "Select Page number");
			toggle_class(select, "bx--pagination-nav__page", true);
			toggle_class(select, "bx--pagination-nav__page--select", true);
			add_location(select, file$7, 26, 6, 663);
			toggle_class(div0, "bx--pagination-nav__select-icon-wrapper", true);
			add_location(div0, file$7, 43, 6, 1253);
			toggle_class(div1, "bx--pagination-nav__select", true);
			add_location(div1, file$7, 24, 4, 563);
			toggle_class(li, "bx--pagination-nav__list-item", true);
			add_location(li, file$7, 23, 2, 509);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, div1);
			append_dev(div1, select);
			append_dev(select, option);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*value*/ ctx[2]);
			append_dev(div1, t);
			append_dev(div1, div0);
			mount_component(overflowmenuhorizontal16, div0, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(select, "change", /*change_handler*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*fromIndex, Array, count*/ 3) {
				each_value = Array.from({ length: /*count*/ ctx[1] }, func);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*value, fromIndex, Array, count*/ 7) {
				select_option(select, /*value*/ ctx[2]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(overflowmenuhorizontal16.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(overflowmenuhorizontal16.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			destroy_each(each_blocks, detaching);
			destroy_component(overflowmenuhorizontal16);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$6.name,
		type: "if",
		source: "(23:0) {#if count > 1}",
		ctx
	});

	return block;
}

// (50:2) <PaginationItem     page="{fromIndex + 1}"     on:click="{() => {       dispatch('select', { index: fromIndex });     }}"   >
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Page");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Page");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(50:2) <PaginationItem     page=\\\"{fromIndex + 1}\\\"     on:click=\\\"{() => {       dispatch('select', { index: fromIndex });     }}\\\"   >",
		ctx
	});

	return block;
}

// (38:8) {#each Array.from({ length: count }, (_, i) => i) as i}
function create_each_block(ctx) {
	let option;
	let t0_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1 + "";
	let t0;
	let t1;
	let option_value_value;
	let option_data_page_value;

	const block = {
		c: function create() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			option = claim_element(nodes, "OPTION", { value: true, "data-page": true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_space(option_nodes);
			option_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			option.__value = option_value_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6];
			option.value = option.__value;
			attr_dev(option, "data-page", option_data_page_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1);
			add_location(option, file$7, 38, 10, 1098);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t0);
			append_dev(option, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*fromIndex, count*/ 3 && t0_value !== (t0_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1 + "")) set_data_dev(t0, t0_value);

			if (dirty & /*fromIndex, count*/ 3 && option_value_value !== (option_value_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6])) {
				prop_dev(option, "__value", option_value_value);
				option.value = option.__value;
			}

			if (dirty & /*fromIndex, count*/ 3 && option_data_page_value !== (option_data_page_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1)) {
				attr_dev(option, "data-page", option_data_page_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(38:8) {#each Array.from({ length: count }, (_, i) => i) as i}",
		ctx
	});

	return block;
}

function create_fragment$7(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$6, create_if_block_1$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*count*/ ctx[1] > 1) return 0;
		if (/*count*/ ctx[1] === 1) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$7.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = (_, i) => i;

function instance$7($$self, $$props, $$invalidate) {
	let { fromIndex = 0 } = $$props;
	let { count = 0 } = $$props;
	const dispatch = createEventDispatcher();
	let value = "";
	const writable_props = ["fromIndex", "count"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PaginationOverflow> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("PaginationOverflow", $$slots, []);

	const change_handler = ({ target }) => {
		$$invalidate(2, value = "");
		dispatch("select", { index: Number(target.value) });
	};

	const click_handler = () => {
		dispatch("select", { index: fromIndex });
	};

	$$self.$$set = $$props => {
		if ("fromIndex" in $$props) $$invalidate(0, fromIndex = $$props.fromIndex);
		if ("count" in $$props) $$invalidate(1, count = $$props.count);
	};

	$$self.$capture_state = () => ({
		fromIndex,
		count,
		createEventDispatcher,
		OverflowMenuHorizontal16,
		PaginationItem,
		dispatch,
		value
	});

	$$self.$inject_state = $$props => {
		if ("fromIndex" in $$props) $$invalidate(0, fromIndex = $$props.fromIndex);
		if ("count" in $$props) $$invalidate(1, count = $$props.count);
		if ("value" in $$props) $$invalidate(2, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [fromIndex, count, value, dispatch, change_handler, click_handler];
}

class PaginationOverflow extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { fromIndex: 0, count: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PaginationOverflow",
			options,
			id: create_fragment$7.name
		});
	}

	get fromIndex() {
		throw new Error("<PaginationOverflow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set fromIndex(value) {
		throw new Error("<PaginationOverflow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get count() {
		throw new Error("<PaginationOverflow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set count(value) {
		throw new Error("<PaginationOverflow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-components-svelte\src\PaginationNav\PaginationNav.svelte generated by Svelte v3.24.1 */
const file$8 = "node_modules\\carbon-components-svelte\\src\\PaginationNav\\PaginationNav.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

// (109:4) {#if fit > MIN || (fit <= MIN && page <= 1)}
function create_if_block_1$2(ctx) {
	let paginationitem;
	let current;

	paginationitem = new PaginationItem({
			props: {
				page: 1,
				active: /*page*/ ctx[0] === 0,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	paginationitem.$on("click", /*click_handler_1*/ ctx[14]);

	const block = {
		c: function create() {
			create_component(paginationitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationitem_changes = {};
			if (dirty & /*page*/ 1) paginationitem_changes.active = /*page*/ ctx[0] === 0;

			if (dirty & /*$$scope, page*/ 8388609) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$2.name,
		type: "if",
		source: "(109:4) {#if fit > MIN || (fit <= MIN && page <= 1)}",
		ctx
	});

	return block;
}

// (110:6) <PaginationItem         page="{1}"         active="{page === 0}"         on:click="{() => (page = 0)}"       >
function create_default_slot_2(ctx) {
	let t_value = (/*page*/ ctx[0] === 0 ? "Active, Page" : "Page") + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*page*/ 1 && t_value !== (t_value = (/*page*/ ctx[0] === 0 ? "Active, Page" : "Page") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(110:6) <PaginationItem         page=\\\"{1}\\\"         active=\\\"{page === 0}\\\"         on:click=\\\"{() => (page = 0)}\\\"       >",
		ctx
	});

	return block;
}

// (124:6) <PaginationItem         page="{item + 1}"         active="{page === item}"         on:click="{() => (page = item)}"       >
function create_default_slot_1(ctx) {
	let t_value = (/*page*/ ctx[0] === /*item*/ ctx[20]
	? "Active, Page"
	: "Page") + "";

	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*page, items*/ 513 && t_value !== (t_value = (/*page*/ ctx[0] === /*item*/ ctx[20]
			? "Active, Page"
			: "Page") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(124:6) <PaginationItem         page=\\\"{item + 1}\\\"         active=\\\"{page === item}\\\"         on:click=\\\"{() => (page = item)}\\\"       >",
		ctx
	});

	return block;
}

// (123:4) {#each items as item}
function create_each_block$1(ctx) {
	let paginationitem;
	let current;

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[16](/*item*/ ctx[20], ...args);
	}

	paginationitem = new PaginationItem({
			props: {
				page: /*item*/ ctx[20] + 1,
				active: /*page*/ ctx[0] === /*item*/ ctx[20],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	paginationitem.$on("click", click_handler_2);

	const block = {
		c: function create() {
			create_component(paginationitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const paginationitem_changes = {};
			if (dirty & /*items*/ 512) paginationitem_changes.page = /*item*/ ctx[20] + 1;
			if (dirty & /*page, items*/ 513) paginationitem_changes.active = /*page*/ ctx[0] === /*item*/ ctx[20];

			if (dirty & /*$$scope, page, items*/ 8389121) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(123:4) {#each items as item}",
		ctx
	});

	return block;
}

// (139:4) {#if total > 1}
function create_if_block$7(ctx) {
	let paginationitem;
	let current;

	paginationitem = new PaginationItem({
			props: {
				page: /*total*/ ctx[1],
				active: /*page*/ ctx[0] === /*total*/ ctx[1] - 1,
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	paginationitem.$on("click", /*click_handler_3*/ ctx[18]);

	const block = {
		c: function create() {
			create_component(paginationitem.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(paginationitem.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const paginationitem_changes = {};
			if (dirty & /*total*/ 2) paginationitem_changes.page = /*total*/ ctx[1];
			if (dirty & /*page, total*/ 3) paginationitem_changes.active = /*page*/ ctx[0] === /*total*/ ctx[1] - 1;

			if (dirty & /*$$scope, page, total*/ 8388611) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$7.name,
		type: "if",
		source: "(139:4) {#if total > 1}",
		ctx
	});

	return block;
}

// (140:6) <PaginationItem         page="{total}"         active="{page === total - 1}"         on:click="{() => (page = total - 1)}"       >
function create_default_slot$1(ctx) {
	let t_value = (/*page*/ ctx[0] === /*total*/ ctx[1] - 1
	? "Active, Page"
	: "Page") + "";

	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*page, total*/ 3 && t_value !== (t_value = (/*page*/ ctx[0] === /*total*/ ctx[1] - 1
			? "Active, Page"
			: "Page") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(140:6) <PaginationItem         page=\\\"{total}\\\"         active=\\\"{page === total - 1}\\\"         on:click=\\\"{() => (page = total - 1)}\\\"       >",
		ctx
	});

	return block;
}

function create_fragment$8(ctx) {
	let nav;
	let ul;
	let li0;
	let button0;
	let t0;
	let t1;
	let paginationoverflow0;
	let t2;
	let t3;
	let paginationoverflow1;
	let t4;
	let t5;
	let li1;
	let button1;
	let t6;
	let div;
	let t7;
	let t8_value = /*page*/ ctx[0] + 1 + "";
	let t8;
	let t9;
	let t10;
	let current;

	button0 = new Button({
			props: {
				hasIconOnly: true,
				kind: "ghost",
				tooltipAlignment: "center",
				tooltipPosition: "bottom",
				iconDescription: /*backwardText*/ ctx[4],
				disabled: !/*loop*/ ctx[2] && /*page*/ ctx[0] === 0,
				icon: CaretLeft16
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler*/ ctx[13]);
	let if_block0 = (/*fit*/ ctx[7] > MIN || /*fit*/ ctx[7] <= MIN && /*page*/ ctx[0] <= 1) && create_if_block_1$2(ctx);

	paginationoverflow0 = new PaginationOverflow({
			props: {
				fromIndex: /*startOffset*/ ctx[8],
				count: /*front*/ ctx[5]
			},
			$$inline: true
		});

	paginationoverflow0.$on("select", /*select_handler*/ ctx[15]);
	let each_value = /*items*/ ctx[9];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	paginationoverflow1 = new PaginationOverflow({
			props: {
				fromIndex: /*total*/ ctx[1] - /*back*/ ctx[6] - 1,
				count: /*back*/ ctx[6]
			},
			$$inline: true
		});

	paginationoverflow1.$on("select", /*select_handler_1*/ ctx[17]);
	let if_block1 = /*total*/ ctx[1] > 1 && create_if_block$7(ctx);

	button1 = new Button({
			props: {
				hasIconOnly: true,
				kind: "ghost",
				tooltipAlignment: "center",
				tooltipPosition: "bottom",
				iconDescription: /*forwardText*/ ctx[3],
				disabled: !/*loop*/ ctx[2] && /*page*/ ctx[0] === /*total*/ ctx[1] - 1,
				icon: CaretRight16
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_4*/ ctx[19]);
	let nav_levels = [{ "aria-label": "pagination" }, /*$$restProps*/ ctx[11]];
	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	const block = {
		c: function create() {
			nav = element("nav");
			ul = element("ul");
			li0 = element("li");
			create_component(button0.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			create_component(paginationoverflow0.$$.fragment);
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			create_component(paginationoverflow1.$$.fragment);
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			li1 = element("li");
			create_component(button1.$$.fragment);
			t6 = space();
			div = element("div");
			t7 = text("Page\n    ");
			t8 = text(t8_value);
			t9 = text("\n    of\n    ");
			t10 = text(/*total*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", { "aria-label": true });
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", {});
			var li0_nodes = children(li0);
			claim_component(button0.$$.fragment, li0_nodes);
			li0_nodes.forEach(detach_dev);
			t0 = claim_space(ul_nodes);
			if (if_block0) if_block0.l(ul_nodes);
			t1 = claim_space(ul_nodes);
			claim_component(paginationoverflow0.$$.fragment, ul_nodes);
			t2 = claim_space(ul_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			t3 = claim_space(ul_nodes);
			claim_component(paginationoverflow1.$$.fragment, ul_nodes);
			t4 = claim_space(ul_nodes);
			if (if_block1) if_block1.l(ul_nodes);
			t5 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			claim_component(button1.$$.fragment, li1_nodes);
			li1_nodes.forEach(detach_dev);
			ul_nodes.forEach(detach_dev);
			t6 = claim_space(nav_nodes);
			div = claim_element(nav_nodes, "DIV", { "aria-live": true, "aria-atomic": true });
			var div_nodes = children(div);
			t7 = claim_text(div_nodes, "Page\n    ");
			t8 = claim_text(div_nodes, t8_value);
			t9 = claim_text(div_nodes, "\n    of\n    ");
			t10 = claim_text(div_nodes, /*total*/ ctx[1]);
			div_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			toggle_class(li0, "bx--pagination-nav__list-item", true);
			add_location(li0, file$8, 89, 4, 2071);
			toggle_class(li1, "bx--pagination-nav__list-item", true);
			add_location(li1, file$8, 147, 4, 3635);
			toggle_class(ul, "bx--pagination-nav__list", true);
			add_location(ul, file$8, 88, 2, 2022);
			attr_dev(div, "aria-live", "polite");
			attr_dev(div, "aria-atomic", "true");
			toggle_class(div, "bx--pagination-nav__accessibility-label", true);
			add_location(div, file$8, 167, 2, 4164);
			set_attributes(nav, nav_data);
			toggle_class(nav, "bx--pagination-nav", true);
			add_location(nav, file$8, 87, 0, 1939);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, ul);
			append_dev(ul, li0);
			mount_component(button0, li0, null);
			append_dev(ul, t0);
			if (if_block0) if_block0.m(ul, null);
			append_dev(ul, t1);
			mount_component(paginationoverflow0, ul, null);
			append_dev(ul, t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(ul, t3);
			mount_component(paginationoverflow1, ul, null);
			append_dev(ul, t4);
			if (if_block1) if_block1.m(ul, null);
			append_dev(ul, t5);
			append_dev(ul, li1);
			mount_component(button1, li1, null);
			append_dev(nav, t6);
			append_dev(nav, div);
			append_dev(div, t7);
			append_dev(div, t8);
			append_dev(div, t9);
			append_dev(div, t10);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const button0_changes = {};
			if (dirty & /*backwardText*/ 16) button0_changes.iconDescription = /*backwardText*/ ctx[4];
			if (dirty & /*loop, page*/ 5) button0_changes.disabled = !/*loop*/ ctx[2] && /*page*/ ctx[0] === 0;
			button0.$set(button0_changes);

			if (/*fit*/ ctx[7] > MIN || /*fit*/ ctx[7] <= MIN && /*page*/ ctx[0] <= 1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*fit, page*/ 129) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(ul, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			const paginationoverflow0_changes = {};
			if (dirty & /*startOffset*/ 256) paginationoverflow0_changes.fromIndex = /*startOffset*/ ctx[8];
			if (dirty & /*front*/ 32) paginationoverflow0_changes.count = /*front*/ ctx[5];
			paginationoverflow0.$set(paginationoverflow0_changes);

			if (dirty & /*items, page*/ 513) {
				each_value = /*items*/ ctx[9];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, t3);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const paginationoverflow1_changes = {};
			if (dirty & /*total, back*/ 66) paginationoverflow1_changes.fromIndex = /*total*/ ctx[1] - /*back*/ ctx[6] - 1;
			if (dirty & /*back*/ 64) paginationoverflow1_changes.count = /*back*/ ctx[6];
			paginationoverflow1.$set(paginationoverflow1_changes);

			if (/*total*/ ctx[1] > 1) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*total*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$7(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(ul, t5);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const button1_changes = {};
			if (dirty & /*forwardText*/ 8) button1_changes.iconDescription = /*forwardText*/ ctx[3];
			if (dirty & /*loop, page, total*/ 7) button1_changes.disabled = !/*loop*/ ctx[2] && /*page*/ ctx[0] === /*total*/ ctx[1] - 1;
			button1.$set(button1_changes);
			if ((!current || dirty & /*page*/ 1) && t8_value !== (t8_value = /*page*/ ctx[0] + 1 + "")) set_data_dev(t8, t8_value);
			if (!current || dirty & /*total*/ 2) set_data_dev(t10, /*total*/ ctx[1]);

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				{ "aria-label": "pagination" },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
			]));

			toggle_class(nav, "bx--pagination-nav", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(if_block0);
			transition_in(paginationoverflow0.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(paginationoverflow1.$$.fragment, local);
			transition_in(if_block1);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(if_block0);
			transition_out(paginationoverflow0.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(paginationoverflow1.$$.fragment, local);
			transition_out(if_block1);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			destroy_component(button0);
			if (if_block0) if_block0.d();
			destroy_component(paginationoverflow0);
			destroy_each(each_blocks, detaching);
			destroy_component(paginationoverflow1);
			if (if_block1) if_block1.d();
			destroy_component(button1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$8.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const MIN = 4;

function instance$8($$self, $$props, $$invalidate) {
	const omit_props_names = ["page","total","shown","loop","forwardText","backwardText"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { page = 0 } = $$props;
	let { total = 10 } = $$props;
	let { shown = 10 } = $$props;
	let { loop = false } = $$props;
	let { forwardText = "Next page" } = $$props;
	let { backwardText = "Previous page" } = $$props;
	const dispatch = createEventDispatcher();

	afterUpdate(() => {
		dispatch("change", { page });
	});

	let front = 0;
	let back = 0;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("PaginationNav", $$slots, []);

	const click_handler = () => {
		if (page - 1 < 0) {
			if (loop) $$invalidate(0, page = total - 1);
		} else {
			$$invalidate(0, page--, page);
		}

		dispatch("click:button--previous", { page });
	};

	const click_handler_1 = () => $$invalidate(0, page = 0);
	const select_handler = ({ detail }) => $$invalidate(0, page = detail.index);
	const click_handler_2 = item => $$invalidate(0, page = item);

	const select_handler_1 = ({ detail }) => {
		$$invalidate(0, page = detail.index);
	};

	const click_handler_3 = () => $$invalidate(0, page = total - 1);

	const click_handler_4 = () => {
		if (page + 1 >= total) {
			if (loop) $$invalidate(0, page = 0);
		} else {
			$$invalidate(0, page++, page);
		}

		dispatch("click:button--next", { page });
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("page" in $$new_props) $$invalidate(0, page = $$new_props.page);
		if ("total" in $$new_props) $$invalidate(1, total = $$new_props.total);
		if ("shown" in $$new_props) $$invalidate(12, shown = $$new_props.shown);
		if ("loop" in $$new_props) $$invalidate(2, loop = $$new_props.loop);
		if ("forwardText" in $$new_props) $$invalidate(3, forwardText = $$new_props.forwardText);
		if ("backwardText" in $$new_props) $$invalidate(4, backwardText = $$new_props.backwardText);
	};

	$$self.$capture_state = () => ({
		page,
		total,
		shown,
		loop,
		forwardText,
		backwardText,
		afterUpdate,
		createEventDispatcher,
		CaretLeft16,
		CaretRight16,
		PaginationItem,
		PaginationOverflow,
		Button,
		dispatch,
		MIN,
		front,
		back,
		fit,
		startOffset,
		items
	});

	$$self.$inject_state = $$new_props => {
		if ("page" in $$props) $$invalidate(0, page = $$new_props.page);
		if ("total" in $$props) $$invalidate(1, total = $$new_props.total);
		if ("shown" in $$props) $$invalidate(12, shown = $$new_props.shown);
		if ("loop" in $$props) $$invalidate(2, loop = $$new_props.loop);
		if ("forwardText" in $$props) $$invalidate(3, forwardText = $$new_props.forwardText);
		if ("backwardText" in $$props) $$invalidate(4, backwardText = $$new_props.backwardText);
		if ("front" in $$props) $$invalidate(5, front = $$new_props.front);
		if ("back" in $$props) $$invalidate(6, back = $$new_props.back);
		if ("fit" in $$props) $$invalidate(7, fit = $$new_props.fit);
		if ("startOffset" in $$props) $$invalidate(8, startOffset = $$new_props.startOffset);
		if ("items" in $$props) $$invalidate(9, items = $$new_props.items);
	};

	let fit;
	let startOffset;
	let items;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*shown*/ 4096) {
			 $$invalidate(7, fit = shown >= MIN ? shown : MIN);
		}

		if ($$self.$$.dirty & /*fit, page*/ 129) {
			 $$invalidate(8, startOffset = fit <= MIN && page > 1 ? 0 : 1);
		}

		if ($$self.$$.dirty & /*fit, total*/ 130) {
			 if (fit >= total) {
				$$invalidate(5, front = 0);
				$$invalidate(6, back = 0);
			}
		}

		if ($$self.$$.dirty & /*fit, total, page, front, back*/ 227) {
			 if (fit < total) {
				const split = Math.ceil(fit / 2) - 1;
				$$invalidate(5, front = page - split + 1);
				$$invalidate(6, back = total - page - (fit - split) + 1);

				if (front <= 1) {
					$$invalidate(6, back -= front <= 0 ? Math.abs(front) + 1 : 0);
					$$invalidate(5, front = 0);
				}

				if (back <= 1) {
					$$invalidate(5, front -= back <= 0 ? Math.abs(back) + 1 : 0);
					$$invalidate(6, back = 0);
				}
			}
		}

		if ($$self.$$.dirty & /*total, startOffset, front, back*/ 354) {
			 $$invalidate(9, items = Array.from({ length: total }).map((e, i) => i).slice(startOffset + front, (back + 1) * -1));
		}
	};

	return [
		page,
		total,
		loop,
		forwardText,
		backwardText,
		front,
		back,
		fit,
		startOffset,
		items,
		dispatch,
		$$restProps,
		shown,
		click_handler,
		click_handler_1,
		select_handler,
		click_handler_2,
		select_handler_1,
		click_handler_3,
		click_handler_4
	];
}

class PaginationNav extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
			page: 0,
			total: 1,
			shown: 12,
			loop: 2,
			forwardText: 3,
			backwardText: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PaginationNav",
			options,
			id: create_fragment$8.name
		});
	}

	get page() {
		throw new Error("<PaginationNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set page(value) {
		throw new Error("<PaginationNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get total() {
		throw new Error("<PaginationNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set total(value) {
		throw new Error("<PaginationNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get shown() {
		throw new Error("<PaginationNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set shown(value) {
		throw new Error("<PaginationNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loop() {
		throw new Error("<PaginationNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loop(value) {
		throw new Error("<PaginationNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get forwardText() {
		throw new Error("<PaginationNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set forwardText(value) {
		throw new Error("<PaginationNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get backwardText() {
		throw new Error("<PaginationNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set backwardText(value) {
		throw new Error("<PaginationNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-icons-svelte\lib\WarningAltFilled16\WarningAltFilled16.svelte generated by Svelte v3.24.1 */

const file$9 = "node_modules\\carbon-icons-svelte\\lib\\WarningAltFilled16\\WarningAltFilled16.svelte";

// (39:4) {#if title}
function create_if_block$8(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			title_1 = claim_element(nodes, "title", {}, 1);
			var title_1_nodes = children(title_1);
			t = claim_text(title_1_nodes, /*title*/ ctx[2]);
			title_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(title_1, file$9, 39, 6, 1348);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$8.name,
		type: "if",
		source: "(39:4) {#if title}",
		ctx
	});

	return block;
}

// (38:8)      
function fallback_block$4(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$8(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$8(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$4.name,
		type: "fallback",
		source: "(38:8)      ",
		ctx
	});

	return block;
}

function create_fragment$9(ctx) {
	let svg;
	let path0;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$4(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "WarningAltFilled16" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "16" },
		{ height: "16" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					"data-carbon-icon": true,
					xmlns: true,
					viewBox: true,
					fill: true,
					width: true,
					height: true,
					class: true,
					preserveAspectRatio: true,
					style: true,
					id: true
				},
				1
			);

			var svg_nodes = children(svg);
			path0 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path0).forEach(detach_dev);

			path1 = claim_element(
				svg_nodes,
				"path",
				{
					fill: true,
					d: true,
					"data-icon-path": true
				},
				1
			);

			children(path1).forEach(detach_dev);
			if (default_slot_or_fallback) default_slot_or_fallback.l(svg_nodes);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path0, "d", "M29.879,27.5212l-13-25.0363a1.04,1.04,0,0,0-1.7583,0l-13,25.0363A1.0015,1.0015,0,0,0,3,29H29a1.001,1.001,0,0,0,.8789-1.4788ZM14.8751,10.0086h2.25V20h-2.25ZM16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Z");
			add_location(path0, file$9, 36, 2, 956);
			attr_dev(path1, "fill", "none");
			attr_dev(path1, "d", "M14.8751,10.0086h2.25V20h-2.25ZM16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Z");
			attr_dev(path1, "data-icon-path", "inner-path");
			add_location(path1, file$9, 36, 224, 1178);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$9, 22, 0, 633);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(svg, "click", /*click_handler*/ ctx[9], false, false, false),
					listen_dev(svg, "mouseover", /*mouseover_handler*/ ctx[10], false, false, false),
					listen_dev(svg, "mouseenter", /*mouseenter_handler*/ ctx[11], false, false, false),
					listen_dev(svg, "mouseleave", /*mouseleave_handler*/ ctx[12], false, false, false),
					listen_dev(svg, "keyup", /*keyup_handler*/ ctx[13], false, false, false),
					listen_dev(svg, "keydown", /*keydown_handler*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "WarningAltFilled16" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "16" },
				{ height: "16" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$9.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$9($$self, $$props, $$invalidate) {
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("WarningAltFilled16", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		className,
		id,
		tabindex,
		focusable,
		title,
		style,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		attributes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(0, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$props) $$invalidate(3, style = $$new_props.style);
		if ("ariaLabel" in $$props) $$invalidate(15, ariaLabel = $$new_props.ariaLabel);
		if ("ariaLabelledBy" in $$props) $$invalidate(16, ariaLabelledBy = $$new_props.ariaLabelledBy);
		if ("labelled" in $$props) $$invalidate(17, labelled = $$new_props.labelled);
		if ("attributes" in $$props) $$invalidate(4, attributes = $$new_props.attributes);
	};

	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(15, ariaLabel = $$props["aria-label"]);
		 $$invalidate(16, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 98308) {
			 $$invalidate(17, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 229472) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		$$scope,
		$$slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class WarningAltFilled16 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "WarningAltFilled16",
			options,
			id: create_fragment$9.name
		});
	}

	get class() {
		throw new Error("<WarningAltFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<WarningAltFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<WarningAltFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<WarningAltFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<WarningAltFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<WarningAltFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focusable() {
		throw new Error("<WarningAltFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focusable(value) {
		throw new Error("<WarningAltFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<WarningAltFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<WarningAltFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<WarningAltFilled16>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<WarningAltFilled16>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-components-svelte\src\TextInput\TextInput.svelte generated by Svelte v3.24.1 */
const file$a = "node_modules\\carbon-components-svelte\\src\\TextInput\\TextInput.svelte";

// (131:2) {#if inline}
function create_if_block_9(ctx) {
	let div;
	let t;
	let if_block0 = /*labelText*/ ctx[10] && create_if_block_11(ctx);
	let if_block1 = !/*isFluid*/ ctx[18] && /*helperText*/ ctx[7] && create_if_block_10(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t = claim_space(div_nodes);
			if (if_block1) if_block1.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "bx--text-input__label-helper-wrapper");
			add_location(div, file$a, 131, 4, 2683);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t);
			if (if_block1) if_block1.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (/*labelText*/ ctx[10]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_11(ctx);
					if_block0.c();
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*isFluid*/ ctx[18] && /*helperText*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_10(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(131:2) {#if inline}",
		ctx
	});

	return block;
}

// (133:6) {#if labelText}
function create_if_block_11(ctx) {
	let label;
	let t;
	let label_class_value;

	const block = {
		c: function create() {
			label = element("label");
			t = text(/*labelText*/ ctx[10]);
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t = claim_text(label_nodes, /*labelText*/ ctx[10]);
			label_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", /*id*/ ctx[8]);
			attr_dev(label, "class", label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
			add_location(label, file$a, 133, 8, 2764);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);
			append_dev(label, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 1024) set_data_dev(t, /*labelText*/ ctx[10]);

			if (dirty[0] & /*id*/ 256) {
				attr_dev(label, "for", /*id*/ ctx[8]);
			}

			if (dirty[0] & /*inline, size*/ 131076 && label_class_value !== (label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`)) {
				attr_dev(label, "class", label_class_value);
			}

			if (dirty[0] & /*inline, size*/ 131076) {
				toggle_class(label, "bx--label", true);
			}

			if (dirty[0] & /*inline, size, hideLabel*/ 133124) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			}

			if (dirty[0] & /*inline, size, disabled*/ 131140) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline, size, inline*/ 131076) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_11.name,
		type: "if",
		source: "(133:6) {#if labelText}",
		ctx
	});

	return block;
}

// (145:6) {#if !isFluid && helperText}
function create_if_block_10(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*helperText*/ ctx[7]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*helperText*/ ctx[7]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
			add_location(div, file$a, 145, 8, 3144);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 128) set_data_dev(t, /*helperText*/ ctx[7]);

			if (dirty[0] & /*disabled*/ 64) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(145:6) {#if !isFluid && helperText}",
		ctx
	});

	return block;
}

// (156:2) {#if !inline && labelText}
function create_if_block_8(ctx) {
	let label;
	let t;
	let label_class_value;

	const block = {
		c: function create() {
			label = element("label");
			t = text(/*labelText*/ ctx[10]);
			this.h();
		},
		l: function claim(nodes) {
			label = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t = claim_text(label_nodes, /*labelText*/ ctx[10]);
			label_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label, "for", /*id*/ ctx[8]);
			attr_dev(label, "class", label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
			add_location(label, file$a, 156, 4, 3426);
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);
			append_dev(label, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 1024) set_data_dev(t, /*labelText*/ ctx[10]);

			if (dirty[0] & /*id*/ 256) {
				attr_dev(label, "for", /*id*/ ctx[8]);
			}

			if (dirty[0] & /*inline, size*/ 131076 && label_class_value !== (label_class_value = /*inline*/ ctx[17] && !!/*size*/ ctx[2] && `bx--label--inline--${/*size*/ ctx[2]}`)) {
				attr_dev(label, "class", label_class_value);
			}

			if (dirty[0] & /*inline, size*/ 131076) {
				toggle_class(label, "bx--label", true);
			}

			if (dirty[0] & /*inline, size, hideLabel*/ 133124) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			}

			if (dirty[0] & /*inline, size, disabled*/ 131140) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline, size, inline*/ 131076) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[17]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(156:2) {#if !inline && labelText}",
		ctx
	});

	return block;
}

// (177:6) {#if invalid}
function create_if_block_7(ctx) {
	let warningfilled16;
	let current;

	warningfilled16 = new WarningFilled16({
			props: { class: "bx--text-input__invalid-icon" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(warningfilled16.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(warningfilled16.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(warningfilled16, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(warningfilled16.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(warningfilled16.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(warningfilled16, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(177:6) {#if invalid}",
		ctx
	});

	return block;
}

// (180:6) {#if !invalid && warn}
function create_if_block_6$1(ctx) {
	let warningaltfilled16;
	let current;

	warningaltfilled16 = new WarningAltFilled16({
			props: {
				class: "bx--text-input__invalid-icon\n            bx--text-input__invalid-icon--warning"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(warningaltfilled16.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(warningaltfilled16.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(warningaltfilled16, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(warningaltfilled16.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(warningaltfilled16.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(warningaltfilled16, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6$1.name,
		type: "if",
		source: "(180:6) {#if !invalid && warn}",
		ctx
	});

	return block;
}

// (213:6) {#if isFluid}
function create_if_block_5$1(ctx) {
	let hr;

	const block = {
		c: function create() {
			hr = element("hr");
			this.h();
		},
		l: function claim(nodes) {
			hr = claim_element(nodes, "HR", {});
			this.h();
		},
		h: function hydrate() {
			toggle_class(hr, "bx--text-input__divider", true);
			add_location(hr, file$a, 213, 8, 5139);
		},
		m: function mount(target, anchor) {
			insert_dev(target, hr, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(hr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5$1.name,
		type: "if",
		source: "(213:6) {#if isFluid}",
		ctx
	});

	return block;
}

// (216:6) {#if isFluid && !inline && invalid}
function create_if_block_4$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*invalidText*/ ctx[13]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*invalidText*/ ctx[13]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
			add_location(div, file$a, 216, 8, 5247);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 8192) set_data_dev(t, /*invalidText*/ ctx[13]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr_dev(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(216:6) {#if isFluid && !inline && invalid}",
		ctx
	});

	return block;
}

// (221:6) {#if isFluid && !inline && warn}
function create_if_block_3$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*warnText*/ ctx[15]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*warnText*/ ctx[15]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", /*warnId*/ ctx[20]);
			toggle_class(div, "bx--form-requirement", true);
			add_location(div, file$a, 221, 8, 5402);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 32768) set_data_dev(t, /*warnText*/ ctx[15]);

			if (dirty[0] & /*warnId*/ 1048576) {
				attr_dev(div, "id", /*warnId*/ ctx[20]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(221:6) {#if isFluid && !inline && warn}",
		ctx
	});

	return block;
}

// (225:4) {#if !invalid && !warn && !isFluid && !inline && helperText}
function create_if_block_2$1(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*helperText*/ ctx[7]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*helperText*/ ctx[7]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
			add_location(div, file$a, 225, 6, 5568);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 128) set_data_dev(t, /*helperText*/ ctx[7]);

			if (dirty[0] & /*disabled*/ 64) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[6]);
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[17]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(225:4) {#if !invalid && !warn && !isFluid && !inline && helperText}",
		ctx
	});

	return block;
}

// (234:4) {#if !isFluid && invalid}
function create_if_block_1$3(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*invalidText*/ ctx[13]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*invalidText*/ ctx[13]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
			add_location(div, file$a, 234, 6, 5820);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 8192) set_data_dev(t, /*invalidText*/ ctx[13]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr_dev(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$3.name,
		type: "if",
		source: "(234:4) {#if !isFluid && invalid}",
		ctx
	});

	return block;
}

// (239:4) {#if !isFluid && !invalid && warn}
function create_if_block$9(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*warnText*/ ctx[15]);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { id: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, /*warnText*/ ctx[15]);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "id", /*warnId*/ ctx[20]);
			toggle_class(div, "bx--form-requirement", true);
			add_location(div, file$a, 239, 6, 5967);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 32768) set_data_dev(t, /*warnText*/ ctx[15]);

			if (dirty[0] & /*warnId*/ 1048576) {
				attr_dev(div, "id", /*warnId*/ ctx[20]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$9.name,
		type: "if",
		source: "(239:4) {#if !isFluid && !invalid && warn}",
		ctx
	});

	return block;
}

function create_fragment$a(ctx) {
	let div2;
	let t0;
	let t1;
	let div1;
	let div0;
	let t2;
	let t3;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_data_warn_value;
	let input_aria_describedby_value;
	let input_class_value;
	let t4;
	let t5;
	let t6;
	let div0_data_invalid_value;
	let div0_data_warn_value;
	let t7;
	let t8;
	let t9;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*inline*/ ctx[17] && create_if_block_9(ctx);
	let if_block1 = !/*inline*/ ctx[17] && /*labelText*/ ctx[10] && create_if_block_8(ctx);
	let if_block2 = /*invalid*/ ctx[12] && create_if_block_7(ctx);
	let if_block3 = !/*invalid*/ ctx[12] && /*warn*/ ctx[14] && create_if_block_6$1(ctx);
	let if_block4 = /*isFluid*/ ctx[18] && create_if_block_5$1(ctx);
	let if_block5 = /*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*invalid*/ ctx[12] && create_if_block_4$1(ctx);
	let if_block6 = /*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*warn*/ ctx[14] && create_if_block_3$1(ctx);
	let if_block7 = !/*invalid*/ ctx[12] && !/*warn*/ ctx[14] && !/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*helperText*/ ctx[7] && create_if_block_2$1(ctx);
	let if_block8 = !/*isFluid*/ ctx[18] && /*invalid*/ ctx[12] && create_if_block_1$3(ctx);
	let if_block9 = !/*isFluid*/ ctx[18] && !/*invalid*/ ctx[12] && /*warn*/ ctx[14] && create_if_block$9(ctx);
	let div2_levels = [/*$$restProps*/ ctx[21]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	const block = {
		c: function create() {
			div2 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			input = element("input");
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			if (if_block5) if_block5.c();
			t6 = space();
			if (if_block6) if_block6.c();
			t7 = space();
			if (if_block7) if_block7.c();
			t8 = space();
			if (if_block8) if_block8.c();
			t9 = space();
			if (if_block9) if_block9.c();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", {});
			var div2_nodes = children(div2);
			if (if_block0) if_block0.l(div2_nodes);
			t0 = claim_space(div2_nodes);
			if (if_block1) if_block1.l(div2_nodes);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", {});
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { "data-invalid": true, "data-warn": true });
			var div0_nodes = children(div0);
			if (if_block2) if_block2.l(div0_nodes);
			t2 = claim_space(div0_nodes);
			if (if_block3) if_block3.l(div0_nodes);
			t3 = claim_space(div0_nodes);

			input = claim_element(div0_nodes, "INPUT", {
				"data-invalid": true,
				"aria-invalid": true,
				"data-warn": true,
				"aria-describedby": true,
				disabled: true,
				id: true,
				name: true,
				placeholder: true,
				type: true,
				value: true,
				required: true,
				class: true
			});

			t4 = claim_space(div0_nodes);
			if (if_block4) if_block4.l(div0_nodes);
			t5 = claim_space(div0_nodes);
			if (if_block5) if_block5.l(div0_nodes);
			t6 = claim_space(div0_nodes);
			if (if_block6) if_block6.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t7 = claim_space(div1_nodes);
			if (if_block7) if_block7.l(div1_nodes);
			t8 = claim_space(div1_nodes);
			if (if_block8) if_block8.l(div1_nodes);
			t9 = claim_space(div1_nodes);
			if (if_block9) if_block9.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "data-invalid", input_data_invalid_value = /*invalid*/ ctx[12] || undefined);
			attr_dev(input, "aria-invalid", input_aria_invalid_value = /*invalid*/ ctx[12] || undefined);
			attr_dev(input, "data-warn", input_data_warn_value = /*warn*/ ctx[14] || undefined);

			attr_dev(input, "aria-describedby", input_aria_describedby_value = /*invalid*/ ctx[12]
			? /*errorId*/ ctx[19]
			: /*warn*/ ctx[14] ? /*warnId*/ ctx[20] : undefined);

			input.disabled = /*disabled*/ ctx[6];
			attr_dev(input, "id", /*id*/ ctx[8]);
			attr_dev(input, "name", /*name*/ ctx[9]);
			attr_dev(input, "placeholder", /*placeholder*/ ctx[4]);
			attr_dev(input, "type", /*type*/ ctx[3]);
			input.value = /*value*/ ctx[0];
			input.required = /*required*/ ctx[16];
			attr_dev(input, "class", input_class_value = /*size*/ ctx[2] && `bx--text-input--${/*size*/ ctx[2]}`);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[5]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[12]);
			toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[14]);
			add_location(input, file$a, 185, 6, 4282);
			attr_dev(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[12] || undefined);
			attr_dev(div0, "data-warn", div0_data_warn_value = /*warn*/ ctx[14] || undefined);
			toggle_class(div0, "bx--text-input__field-wrapper", true);
			add_location(div0, file$a, 171, 4, 3858);
			toggle_class(div1, "bx--text-input__field-outer-wrapper", true);
			toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[17]);
			add_location(div1, file$a, 167, 2, 3725);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--form-item", true);
			toggle_class(div2, "bx--text-input-wrapper", true);
			toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[17]);
			add_location(div2, file$a, 120, 0, 2459);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append_dev(div2, t0);
			if (if_block1) if_block1.m(div2, null);
			append_dev(div2, t1);
			append_dev(div2, div1);
			append_dev(div1, div0);
			if (if_block2) if_block2.m(div0, null);
			append_dev(div0, t2);
			if (if_block3) if_block3.m(div0, null);
			append_dev(div0, t3);
			append_dev(div0, input);
			/*input_binding*/ ctx[31](input);
			append_dev(div0, t4);
			if (if_block4) if_block4.m(div0, null);
			append_dev(div0, t5);
			if (if_block5) if_block5.m(div0, null);
			append_dev(div0, t6);
			if (if_block6) if_block6.m(div0, null);
			append_dev(div1, t7);
			if (if_block7) if_block7.m(div1, null);
			append_dev(div1, t8);
			if (if_block8) if_block8.m(div1, null);
			append_dev(div1, t9);
			if (if_block9) if_block9.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*change_handler*/ ctx[26], false, false, false),
					listen_dev(input, "input", /*input_handler*/ ctx[27], false, false, false),
					listen_dev(input, "input", /*input_handler_1*/ ctx[32], false, false, false),
					listen_dev(input, "keydown", /*keydown_handler*/ ctx[28], false, false, false),
					listen_dev(input, "focus", /*focus_handler*/ ctx[29], false, false, false),
					listen_dev(input, "blur", /*blur_handler*/ ctx[30], false, false, false),
					listen_dev(div2, "click", /*click_handler*/ ctx[22], false, false, false),
					listen_dev(div2, "mouseover", /*mouseover_handler*/ ctx[23], false, false, false),
					listen_dev(div2, "mouseenter", /*mouseenter_handler*/ ctx[24], false, false, false),
					listen_dev(div2, "mouseleave", /*mouseleave_handler*/ ctx[25], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*inline*/ ctx[17]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_9(ctx);
					if_block0.c();
					if_block0.m(div2, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*inline*/ ctx[17] && /*labelText*/ ctx[10]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_8(ctx);
					if_block1.c();
					if_block1.m(div2, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*invalid*/ ctx[12]) {
				if (if_block2) {
					if (dirty[0] & /*invalid*/ 4096) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_7(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[12] && /*warn*/ ctx[14]) {
				if (if_block3) {
					if (dirty[0] & /*invalid, warn*/ 20480) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_6$1(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*invalid*/ 4096 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[12] || undefined)) {
				attr_dev(input, "data-invalid", input_data_invalid_value);
			}

			if (!current || dirty[0] & /*invalid*/ 4096 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[12] || undefined)) {
				attr_dev(input, "aria-invalid", input_aria_invalid_value);
			}

			if (!current || dirty[0] & /*warn*/ 16384 && input_data_warn_value !== (input_data_warn_value = /*warn*/ ctx[14] || undefined)) {
				attr_dev(input, "data-warn", input_data_warn_value);
			}

			if (!current || dirty[0] & /*invalid, errorId, warn, warnId*/ 1593344 && input_aria_describedby_value !== (input_aria_describedby_value = /*invalid*/ ctx[12]
			? /*errorId*/ ctx[19]
			: /*warn*/ ctx[14] ? /*warnId*/ ctx[20] : undefined)) {
				attr_dev(input, "aria-describedby", input_aria_describedby_value);
			}

			if (!current || dirty[0] & /*disabled*/ 64) {
				prop_dev(input, "disabled", /*disabled*/ ctx[6]);
			}

			if (!current || dirty[0] & /*id*/ 256) {
				attr_dev(input, "id", /*id*/ ctx[8]);
			}

			if (!current || dirty[0] & /*name*/ 512) {
				attr_dev(input, "name", /*name*/ ctx[9]);
			}

			if (!current || dirty[0] & /*placeholder*/ 16) {
				attr_dev(input, "placeholder", /*placeholder*/ ctx[4]);
			}

			if (!current || dirty[0] & /*type*/ 8) {
				attr_dev(input, "type", /*type*/ ctx[3]);
			}

			if (!current || dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				prop_dev(input, "value", /*value*/ ctx[0]);
			}

			if (!current || dirty[0] & /*required*/ 65536) {
				prop_dev(input, "required", /*required*/ ctx[16]);
			}

			if (!current || dirty[0] & /*size*/ 4 && input_class_value !== (input_class_value = /*size*/ ctx[2] && `bx--text-input--${/*size*/ ctx[2]}`)) {
				attr_dev(input, "class", input_class_value);
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(input, "bx--text-input", true);
			}

			if (dirty[0] & /*size, light*/ 36) {
				toggle_class(input, "bx--text-input--light", /*light*/ ctx[5]);
			}

			if (dirty[0] & /*size, invalid*/ 4100) {
				toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[12]);
			}

			if (dirty[0] & /*size, warn*/ 16388) {
				toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[14]);
			}

			if (/*isFluid*/ ctx[18]) {
				if (if_block4) ; else {
					if_block4 = create_if_block_5$1(ctx);
					if_block4.c();
					if_block4.m(div0, t5);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*invalid*/ ctx[12]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_4$1(ctx);
					if_block5.c();
					if_block5.m(div0, t6);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*warn*/ ctx[14]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_3$1(ctx);
					if_block6.c();
					if_block6.m(div0, null);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (!current || dirty[0] & /*invalid*/ 4096 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[12] || undefined)) {
				attr_dev(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!current || dirty[0] & /*warn*/ 16384 && div0_data_warn_value !== (div0_data_warn_value = /*warn*/ ctx[14] || undefined)) {
				attr_dev(div0, "data-warn", div0_data_warn_value);
			}

			if (!/*invalid*/ ctx[12] && !/*warn*/ ctx[14] && !/*isFluid*/ ctx[18] && !/*inline*/ ctx[17] && /*helperText*/ ctx[7]) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_2$1(ctx);
					if_block7.c();
					if_block7.m(div1, t8);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (!/*isFluid*/ ctx[18] && /*invalid*/ ctx[12]) {
				if (if_block8) {
					if_block8.p(ctx, dirty);
				} else {
					if_block8 = create_if_block_1$3(ctx);
					if_block8.c();
					if_block8.m(div1, t9);
				}
			} else if (if_block8) {
				if_block8.d(1);
				if_block8 = null;
			}

			if (!/*isFluid*/ ctx[18] && !/*invalid*/ ctx[12] && /*warn*/ ctx[14]) {
				if (if_block9) {
					if_block9.p(ctx, dirty);
				} else {
					if_block9 = create_if_block$9(ctx);
					if_block9.c();
					if_block9.m(div1, null);
				}
			} else if (if_block9) {
				if_block9.d(1);
				if_block9 = null;
			}

			if (dirty[0] & /*inline*/ 131072) {
				toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[17]);
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty[0] & /*$$restProps*/ 2097152 && /*$$restProps*/ ctx[21]]));
			toggle_class(div2, "bx--form-item", true);
			toggle_class(div2, "bx--text-input-wrapper", true);
			toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[17]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			/*input_binding*/ ctx[31](null);
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			if (if_block8) if_block8.d();
			if (if_block9) if_block9.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$a.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$a($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","value","type","placeholder","light","disabled","helperText","id","name","labelText","hideLabel","invalid","invalidText","warn","warnText","ref","required","inline"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { type = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { helperText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { ref = null } = $$props;
	let { required = false } = $$props;
	let { inline = false } = $$props;
	const ctx = getContext("Form");
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("TextInput", $$slots, []);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function change_handler(event) {
		bubble($$self, event);
	}

	function input_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	function focus_handler(event) {
		bubble($$self, event);
	}

	function blur_handler(event) {
		bubble($$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(0, value = target.value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(21, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("size" in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("type" in $$new_props) $$invalidate(3, type = $$new_props.type);
		if ("placeholder" in $$new_props) $$invalidate(4, placeholder = $$new_props.placeholder);
		if ("light" in $$new_props) $$invalidate(5, light = $$new_props.light);
		if ("disabled" in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("helperText" in $$new_props) $$invalidate(7, helperText = $$new_props.helperText);
		if ("id" in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ("name" in $$new_props) $$invalidate(9, name = $$new_props.name);
		if ("labelText" in $$new_props) $$invalidate(10, labelText = $$new_props.labelText);
		if ("hideLabel" in $$new_props) $$invalidate(11, hideLabel = $$new_props.hideLabel);
		if ("invalid" in $$new_props) $$invalidate(12, invalid = $$new_props.invalid);
		if ("invalidText" in $$new_props) $$invalidate(13, invalidText = $$new_props.invalidText);
		if ("warn" in $$new_props) $$invalidate(14, warn = $$new_props.warn);
		if ("warnText" in $$new_props) $$invalidate(15, warnText = $$new_props.warnText);
		if ("ref" in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ("required" in $$new_props) $$invalidate(16, required = $$new_props.required);
		if ("inline" in $$new_props) $$invalidate(17, inline = $$new_props.inline);
	};

	$$self.$capture_state = () => ({
		size,
		value,
		type,
		placeholder,
		light,
		disabled,
		helperText,
		id,
		name,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		warn,
		warnText,
		ref,
		required,
		inline,
		getContext,
		WarningFilled16,
		WarningAltFilled16,
		ctx,
		isFluid,
		errorId,
		warnId
	});

	$$self.$inject_state = $$new_props => {
		if ("size" in $$props) $$invalidate(2, size = $$new_props.size);
		if ("value" in $$props) $$invalidate(0, value = $$new_props.value);
		if ("type" in $$props) $$invalidate(3, type = $$new_props.type);
		if ("placeholder" in $$props) $$invalidate(4, placeholder = $$new_props.placeholder);
		if ("light" in $$props) $$invalidate(5, light = $$new_props.light);
		if ("disabled" in $$props) $$invalidate(6, disabled = $$new_props.disabled);
		if ("helperText" in $$props) $$invalidate(7, helperText = $$new_props.helperText);
		if ("id" in $$props) $$invalidate(8, id = $$new_props.id);
		if ("name" in $$props) $$invalidate(9, name = $$new_props.name);
		if ("labelText" in $$props) $$invalidate(10, labelText = $$new_props.labelText);
		if ("hideLabel" in $$props) $$invalidate(11, hideLabel = $$new_props.hideLabel);
		if ("invalid" in $$props) $$invalidate(12, invalid = $$new_props.invalid);
		if ("invalidText" in $$props) $$invalidate(13, invalidText = $$new_props.invalidText);
		if ("warn" in $$props) $$invalidate(14, warn = $$new_props.warn);
		if ("warnText" in $$props) $$invalidate(15, warnText = $$new_props.warnText);
		if ("ref" in $$props) $$invalidate(1, ref = $$new_props.ref);
		if ("required" in $$props) $$invalidate(16, required = $$new_props.required);
		if ("inline" in $$props) $$invalidate(17, inline = $$new_props.inline);
		if ("isFluid" in $$props) $$invalidate(18, isFluid = $$new_props.isFluid);
		if ("errorId" in $$props) $$invalidate(19, errorId = $$new_props.errorId);
		if ("warnId" in $$props) $$invalidate(20, warnId = $$new_props.warnId);
	};

	let isFluid;
	let errorId;
	let warnId;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 256) {
			 $$invalidate(19, errorId = `error-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 256) {
			 $$invalidate(20, warnId = `warn-${id}`);
		}
	};

	 $$invalidate(18, isFluid = !!ctx && ctx.isFluid);

	return [
		value,
		ref,
		size,
		type,
		placeholder,
		light,
		disabled,
		helperText,
		id,
		name,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		warn,
		warnText,
		required,
		inline,
		isFluid,
		errorId,
		warnId,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		keydown_handler,
		focus_handler,
		blur_handler,
		input_binding,
		input_handler_1
	];
}

class TextInput extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$a,
			create_fragment$a,
			safe_not_equal,
			{
				size: 2,
				value: 0,
				type: 3,
				placeholder: 4,
				light: 5,
				disabled: 6,
				helperText: 7,
				id: 8,
				name: 9,
				labelText: 10,
				hideLabel: 11,
				invalid: 12,
				invalidText: 13,
				warn: 14,
				warnText: 15,
				ref: 1,
				required: 16,
				inline: 17
			},
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TextInput",
			options,
			id: create_fragment$a.name
		});
	}

	get size() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placeholder() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placeholder(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get light() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set light(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get helperText() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set helperText(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get labelText() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set labelText(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hideLabel() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hideLabel(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalid() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalid(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get invalidText() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set invalidText(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get warn() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set warn(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get warnText() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set warnText(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ref() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ref(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get required() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set required(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inline() {
		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inline(value) {
		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules\carbon-components-svelte\src\Tile\Tile.svelte generated by Svelte v3.24.1 */

const file$b = "node_modules\\carbon-components-svelte\\src\\Tile\\Tile.svelte";

function create_fragment$b(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let div_levels = [/*$$restProps*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			if (default_slot) default_slot.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(div, div_data);
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
			add_location(div, file$b, 8, 0, 142);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div, "click", /*click_handler*/ ctx[4], false, false, false),
					listen_dev(div, "mouseover", /*mouseover_handler*/ ctx[5], false, false, false),
					listen_dev(div, "mouseenter", /*mouseenter_handler*/ ctx[6], false, false, false),
					listen_dev(div, "mouseleave", /*mouseleave_handler*/ ctx[7], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$b.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$b($$self, $$props, $$invalidate) {
	const omit_props_names = ["light"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { light = false } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Tile", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("light" in $$new_props) $$invalidate(0, light = $$new_props.light);
		if ("$$scope" in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({ light });

	$$self.$inject_state = $$new_props => {
		if ("light" in $$props) $$invalidate(0, light = $$new_props.light);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		light,
		$$restProps,
		$$scope,
		$$slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Tile extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$b, create_fragment$b, safe_not_equal, { light: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tile",
			options,
			id: create_fragment$b.name
		});
	}

	get light() {
		throw new Error("<Tile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set light(value) {
		throw new Error("<Tile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

let base = 'http://localhost:5000';

function send({ method, path, data, token }) {
	const fetch =  window.fetch ;

	const opts = { method, headers: {} };

	if (data) {
		opts.headers['Content-Type'] = 'application/json';
		opts.body = JSON.stringify(data);
	}

	if (token) {
		opts.headers['Authorization'] = `Token ${token}`;
	}

	return fetch(`${base}/${path}`, opts)
		.then(r => r.text())
		.then(json => {
			try {
				return JSON.parse(json);
			} catch (err) {
				return json;
			}
		});
}

function get(path, token) {
	return send({ method: 'GET', path, token });
}

function del(path, token) {
	return send({ method: 'DELETE', path, token });
}

function post(path, data, token) {
	return send({ method: 'POST', path, data, token });
}

function put(path, data, token) {
	return send({ method: 'PUT', path, data, token });
}

var api = /*#__PURE__*/Object.freeze({
  __proto__: null,
  base: base,
  get: get,
  del: del,
  post: post,
  put: put
});

/* node_modules\carbon-icons-svelte\lib\Add20\Add20.svelte generated by Svelte v3.24.1 */

const file$c = "node_modules\\carbon-icons-svelte\\lib\\Add20\\Add20.svelte";

// (39:4) {#if title}
function create_if_block$a(ctx) {
	let title_1;
	let t;

	const block = {
		c: function create() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[2]);
			this.h();
		},
		l: function claim(nodes) {
			title_1 = claim_element(nodes, "title", {}, 1);
			var title_1_nodes = children(title_1);
			t = claim_text(title_1_nodes, /*title*/ ctx[2]);
			title_1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(title_1, file$c, 39, 6, 1062);
		},
		m: function mount(target, anchor) {
			insert_dev(target, title_1, anchor);
			append_dev(title_1, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data_dev(t, /*title*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(title_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$a.name,
		type: "if",
		source: "(39:4) {#if title}",
		ctx
	});

	return block;
}

// (38:8)      
function fallback_block$5(ctx) {
	let if_block_anchor;
	let if_block = /*title*/ ctx[2] && create_if_block$a(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*title*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$a(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block$5.name,
		type: "fallback",
		source: "(38:8)      ",
		ctx
	});

	return block;
}

function create_fragment$c(ctx) {
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*$$slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$5(ctx);

	let svg_levels = [
		{ "data-carbon-icon": "Add20" },
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ width: "20" },
		{ height: "20" },
		{ class: /*className*/ ctx[0] },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ style: /*style*/ ctx[3] },
		{ id: /*id*/ ctx[1] },
		/*attributes*/ ctx[4]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					"data-carbon-icon": true,
					xmlns: true,
					viewBox: true,
					fill: true,
					width: true,
					height: true,
					class: true,
					preserveAspectRatio: true,
					style: true,
					id: true
				},
				1
			);

			var svg_nodes = children(svg);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			if (default_slot_or_fallback) default_slot_or_fallback.l(svg_nodes);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z");
			add_location(path, file$c, 36, 2, 943);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$c, 22, 0, 633);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(svg, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(svg, "click", /*click_handler*/ ctx[9], false, false, false),
					listen_dev(svg, "mouseover", /*mouseover_handler*/ ctx[10], false, false, false),
					listen_dev(svg, "mouseenter", /*mouseenter_handler*/ ctx[11], false, false, false),
					listen_dev(svg, "mouseleave", /*mouseleave_handler*/ ctx[12], false, false, false),
					listen_dev(svg, "keyup", /*keyup_handler*/ ctx[13], false, false, false),
					listen_dev(svg, "keydown", /*keydown_handler*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 128) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[7], dirty, null, null);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && dirty & /*title*/ 4) {
					default_slot_or_fallback.p(ctx, dirty);
				}
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ "data-carbon-icon": "Add20" },
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ width: "20" },
				{ height: "20" },
				(!current || dirty & /*className*/ 1) && { class: /*className*/ ctx[0] },
				{ preserveAspectRatio: "xMidYMid meet" },
				(!current || dirty & /*style*/ 8) && { style: /*style*/ ctx[3] },
				(!current || dirty & /*id*/ 2) && { id: /*id*/ ctx[1] },
				dirty & /*attributes*/ 16 && /*attributes*/ ctx[4]
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$c.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$c($$self, $$props, $$invalidate) {
	let { class: className = undefined } = $$props;
	let { id = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	let { focusable = false } = $$props;
	let { title = undefined } = $$props;
	let { style = undefined } = $$props;
	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Add20", $$slots, ['default']);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function mouseenter_handler(event) {
		bubble($$self, event);
	}

	function mouseleave_handler(event) {
		bubble($$self, event);
	}

	function keyup_handler(event) {
		bubble($$self, event);
	}

	function keydown_handler(event) {
		bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(0, className = $$new_props.class);
		if ("id" in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$new_props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$new_props) $$invalidate(3, style = $$new_props.style);
		if ("$$scope" in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		className,
		id,
		tabindex,
		focusable,
		title,
		style,
		ariaLabel,
		ariaLabelledBy,
		labelled,
		attributes
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(18, $$props = assign(assign({}, $$props), $$new_props));
		if ("className" in $$props) $$invalidate(0, className = $$new_props.className);
		if ("id" in $$props) $$invalidate(1, id = $$new_props.id);
		if ("tabindex" in $$props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ("focusable" in $$props) $$invalidate(6, focusable = $$new_props.focusable);
		if ("title" in $$props) $$invalidate(2, title = $$new_props.title);
		if ("style" in $$props) $$invalidate(3, style = $$new_props.style);
		if ("ariaLabel" in $$props) $$invalidate(15, ariaLabel = $$new_props.ariaLabel);
		if ("ariaLabelledBy" in $$props) $$invalidate(16, ariaLabelledBy = $$new_props.ariaLabelledBy);
		if ("labelled" in $$props) $$invalidate(17, labelled = $$new_props.labelled);
		if ("attributes" in $$props) $$invalidate(4, attributes = $$new_props.attributes);
	};

	let ariaLabel;
	let ariaLabelledBy;
	let labelled;
	let attributes;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(15, ariaLabel = $$props["aria-label"]);
		 $$invalidate(16, ariaLabelledBy = $$props["aria-labelledby"]);

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, title*/ 98308) {
			 $$invalidate(17, labelled = ariaLabel || ariaLabelledBy || title);
		}

		if ($$self.$$.dirty & /*ariaLabel, ariaLabelledBy, labelled, tabindex, focusable*/ 229472) {
			 $$invalidate(4, attributes = {
				"aria-label": ariaLabel,
				"aria-labelledby": ariaLabelledBy,
				"aria-hidden": labelled ? undefined : true,
				role: labelled ? "img" : undefined,
				focusable: tabindex === "0" ? true : focusable,
				tabindex
			});
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		className,
		id,
		title,
		style,
		attributes,
		tabindex,
		focusable,
		$$scope,
		$$slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler
	];
}

class Add20 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
			class: 0,
			id: 1,
			tabindex: 5,
			focusable: 6,
			title: 2,
			style: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Add20",
			options,
			id: create_fragment$c.name
		});
	}

	get class() {
		throw new Error("<Add20>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Add20>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Add20>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Add20>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tabindex() {
		throw new Error("<Add20>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<Add20>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get focusable() {
		throw new Error("<Add20>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set focusable(value) {
		throw new Error("<Add20>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get title() {
		throw new Error("<Add20>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Add20>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Add20>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Add20>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\routes\index.svelte generated by Svelte v3.24.1 */

const { console: console_1 } = globals;

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (63:2) <Column noGutter lg={16} md={8} sm={4}>
function create_default_slot_7(ctx) {
	let textinput;
	let updating_value;
	let current;

	function textinput_value_binding(value) {
		/*textinput_value_binding*/ ctx[7].call(null, value);
	}

	let textinput_props = { placeholder: "Search" };

	if (/*q*/ ctx[4] !== void 0) {
		textinput_props.value = /*q*/ ctx[4];
	}

	textinput = new TextInput({ props: textinput_props, $$inline: true });
	binding_callbacks.push(() => bind(textinput, "value", textinput_value_binding));

	const block = {
		c: function create() {
			create_component(textinput.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(textinput.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(textinput, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textinput_changes = {};

			if (!updating_value && dirty & /*q*/ 16) {
				updating_value = true;
				textinput_changes.value = /*q*/ ctx[4];
				add_flush_callback(() => updating_value = false);
			}

			textinput.$set(textinput_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textinput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textinput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textinput, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(63:2) <Column noGutter lg={16} md={8} sm={4}>",
		ctx
	});

	return block;
}

// (62:0) <Row style="position: sticky">
function create_default_slot_6(ctx) {
	let column;
	let current;

	column = new Column({
			props: {
				noGutter: true,
				lg: 16,
				md: 8,
				sm: 4,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(column.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(column, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column_changes = {};

			if (dirty & /*$$scope, q*/ 131088) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(62:0) <Row style=\\\"position: sticky\\\">",
		ctx
	});

	return block;
}

// (71:2) <Column noGutter lg={15} md={7} sm={3}>
function create_default_slot_5(ctx) {
	let textinput;
	let updating_value;
	let current;

	function textinput_value_binding_1(value) {
		/*textinput_value_binding_1*/ ctx[8].call(null, value);
	}

	let textinput_props = {
		invalid: /*text_i*/ ctx[2],
		placeholder: "Add text",
		invalidText: "More than 37 characters"
	};

	if (/*text*/ ctx[5] !== void 0) {
		textinput_props.value = /*text*/ ctx[5];
	}

	textinput = new TextInput({ props: textinput_props, $$inline: true });
	binding_callbacks.push(() => bind(textinput, "value", textinput_value_binding_1));

	const block = {
		c: function create() {
			create_component(textinput.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(textinput.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(textinput, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textinput_changes = {};
			if (dirty & /*text_i*/ 4) textinput_changes.invalid = /*text_i*/ ctx[2];

			if (!updating_value && dirty & /*text*/ 32) {
				updating_value = true;
				textinput_changes.value = /*text*/ ctx[5];
				add_flush_callback(() => updating_value = false);
			}

			textinput.$set(textinput_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textinput.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textinput.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textinput, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(71:2) <Column noGutter lg={15} md={7} sm={3}>",
		ctx
	});

	return block;
}

// (78:2) <Column noGutter lg={1} md={1} sm={1}>
function create_default_slot_4(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				icon: Add20,
				hasIconOnly: true,
				tooltiipPosition: "bottom",
				tooltipAlignment: "center",
				iconDescription: "Submit"
			},
			$$inline: true
		});

	button.$on("click", /*add*/ ctx[6]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(button.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(78:2) <Column noGutter lg={1} md={1} sm={1}>",
		ctx
	});

	return block;
}

// (70:0) <Row>
function create_default_slot_3(ctx) {
	let column0;
	let t;
	let column1;
	let current;

	column0 = new Column({
			props: {
				noGutter: true,
				lg: 15,
				md: 7,
				sm: 3,
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	column1 = new Column({
			props: {
				noGutter: true,
				lg: 1,
				md: 1,
				sm: 1,
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column0.$$.fragment);
			t = space();
			create_component(column1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(column0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(column1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(column0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(column1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column0_changes = {};

			if (dirty & /*$$scope, text_i, text*/ 131108) {
				column0_changes.$$scope = { dirty, ctx };
			}

			column0.$set(column0_changes);
			const column1_changes = {};

			if (dirty & /*$$scope*/ 131072) {
				column1_changes.$$scope = { dirty, ctx };
			}

			column1.$set(column1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column0.$$.fragment, local);
			transition_in(column1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column0.$$.fragment, local);
			transition_out(column1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(column1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(70:0) <Row>",
		ctx
	});

	return block;
}

// (92:6) <Tile>
function create_default_slot_2$1(ctx) {
	let t_value = /*text*/ ctx[5].body + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		l: function claim(nodes) {
			t = claim_text(nodes, t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*texts*/ 1 && t_value !== (t_value = /*text*/ ctx[5].body + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2$1.name,
		type: "slot",
		source: "(92:6) <Tile>",
		ctx
	});

	return block;
}

// (91:4) {#each texts as text(text.id)}
function create_each_block$2(key_1, ctx) {
	let first;
	let tile;
	let current;

	tile = new Tile({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(tile.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(tile.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_dev(target, first, anchor);
			mount_component(tile, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tile_changes = {};

			if (dirty & /*$$scope, texts*/ 131073) {
				tile_changes.$$scope = { dirty, ctx };
			}

			tile.$set(tile_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tile.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tile.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(first);
			destroy_component(tile, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(91:4) {#each texts as text(text.id)}",
		ctx
	});

	return block;
}

// (90:2) <Column noGutter lg={16} md={16} sm={16}>
function create_default_slot_1$1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t;
	let paginationnav;
	let updating_page;
	let current;
	let each_value = /*texts*/ ctx[0];
	validate_each_argument(each_value);
	const get_key = ctx => /*text*/ ctx[5].id;
	validate_each_keys(ctx, each_value, get_each_context$2, get_key);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$2(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
	}

	function paginationnav_page_binding(value) {
		/*paginationnav_page_binding*/ ctx[9].call(null, value);
	}

	let paginationnav_props = { loop: true, total: /*total*/ ctx[1] };

	if (/*page*/ ctx[3] !== void 0) {
		paginationnav_props.page = /*page*/ ctx[3];
	}

	paginationnav = new PaginationNav({
			props: paginationnav_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(paginationnav, "page", paginationnav_page_binding));

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			create_component(paginationnav.$$.fragment);
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			t = claim_space(nodes);
			claim_component(paginationnav.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t, anchor);
			mount_component(paginationnav, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*texts*/ 1) {
				const each_value = /*texts*/ ctx[0];
				validate_each_argument(each_value);
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context$2, get_key);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, t.parentNode, outro_and_destroy_block, create_each_block$2, t, get_each_context$2);
				check_outros();
			}

			const paginationnav_changes = {};
			if (dirty & /*total*/ 2) paginationnav_changes.total = /*total*/ ctx[1];

			if (!updating_page && dirty & /*page*/ 8) {
				updating_page = true;
				paginationnav_changes.page = /*page*/ ctx[3];
				add_flush_callback(() => updating_page = false);
			}

			paginationnav.$set(paginationnav_changes);
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(paginationnav.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(paginationnav.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach_dev(t);
			destroy_component(paginationnav, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1$1.name,
		type: "slot",
		source: "(90:2) <Column noGutter lg={16} md={16} sm={16}>",
		ctx
	});

	return block;
}

// (89:0) <Row>
function create_default_slot$2(ctx) {
	let column;
	let current;

	column = new Column({
			props: {
				noGutter: true,
				lg: 16,
				md: 16,
				sm: 16,
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(column.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(column.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(column, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const column_changes = {};

			if (dirty & /*$$scope, total, page, texts*/ 131083) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(column.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(column.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(column, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$2.name,
		type: "slot",
		source: "(89:0) <Row>",
		ctx
	});

	return block;
}

function create_fragment$d(ctx) {
	let row0;
	let t0;
	let row1;
	let t1;
	let row2;
	let current;

	row0 = new Row({
			props: {
				style: "position: sticky",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	row1 = new Row({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	row2 = new Row({
			props: {
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row0.$$.fragment);
			t0 = space();
			create_component(row1.$$.fragment);
			t1 = space();
			create_component(row2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(row0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(row1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(row2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(row0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(row1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(row2, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const row0_changes = {};

			if (dirty & /*$$scope, q*/ 131088) {
				row0_changes.$$scope = { dirty, ctx };
			}

			row0.$set(row0_changes);
			const row1_changes = {};

			if (dirty & /*$$scope, text_i, text*/ 131108) {
				row1_changes.$$scope = { dirty, ctx };
			}

			row1.$set(row1_changes);
			const row2_changes = {};

			if (dirty & /*$$scope, total, page, texts*/ 131083) {
				row2_changes.$$scope = { dirty, ctx };
			}

			row2.$set(row2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row0.$$.fragment, local);
			transition_in(row1.$$.fragment, local);
			transition_in(row2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row0.$$.fragment, local);
			transition_out(row1.$$.fragment, local);
			transition_out(row2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(row1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(row2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$d.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$d($$self, $$props, $$invalidate) {
	let texts = [];
	let total = 1;
	let s = false;
	let text_i = false;
	let page = 0;
	let text;
	let res = {};
	let q = "";

	let snc = function () {
		if (q != "") {
			search();
		} else {
			get$1();
		}
	};

	let add = async function () {
		if (text.length > 37) {
			$$invalidate(2, text_i = true);
			return;
		}

		res = await post(`add/${text}`);
		$$invalidate(1, total = res.meta.total_pages);
		$$invalidate(0, texts = res.data);
	};

	let search = async function () {
		res = await get(`search?q=${q}&page=${page + 1}`);
		$$invalidate(1, total = res.meta.total_pages);
		$$invalidate(0, texts = res.data);
		console.log(res.data);
		s = true;
	};

	let get$1 = async function () {
		res = await get(`texts?page=${page + 1}`);
		$$invalidate(1, total = res.meta.total_pages);
		$$invalidate(0, texts = res.data);
	};

	onMount(() => {
		get$1();
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Routes", $$slots, []);

	function textinput_value_binding(value) {
		q = value;
		$$invalidate(4, q);
	}

	function textinput_value_binding_1(value) {
		text = value;
		$$invalidate(5, text);
	}

	function paginationnav_page_binding(value) {
		page = value;
		$$invalidate(3, page);
	}

	$$self.$capture_state = () => ({
		PaginationNav,
		TextInput,
		Button,
		Column,
		Tile,
		Row,
		onMount,
		api,
		Add20,
		texts,
		total,
		s,
		text_i,
		page,
		text,
		res,
		q,
		snc,
		add,
		search,
		get: get$1
	});

	$$self.$inject_state = $$props => {
		if ("texts" in $$props) $$invalidate(0, texts = $$props.texts);
		if ("total" in $$props) $$invalidate(1, total = $$props.total);
		if ("s" in $$props) s = $$props.s;
		if ("text_i" in $$props) $$invalidate(2, text_i = $$props.text_i);
		if ("page" in $$props) $$invalidate(3, page = $$props.page);
		if ("text" in $$props) $$invalidate(5, text = $$props.text);
		if ("res" in $$props) res = $$props.res;
		if ("q" in $$props) $$invalidate(4, q = $$props.q);
		if ("snc" in $$props) $$invalidate(12, snc = $$props.snc);
		if ("add" in $$props) $$invalidate(6, add = $$props.add);
		if ("search" in $$props) search = $$props.search;
		if ("get" in $$props) get$1 = $$props.get;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*q, page*/ 24) {
			 snc(q, page);
		}
	};

	return [
		texts,
		total,
		text_i,
		page,
		q,
		text,
		add,
		textinput_value_binding,
		textinput_value_binding_1,
		paginationnav_page_binding
	];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment$d.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
